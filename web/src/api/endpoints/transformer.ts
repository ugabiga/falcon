/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Falcon API
 * This is a crypto trading bot API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetApiV1TasksParams,
  HandlerAPIError,
  HandlerProtectedResponse,
  HandlerSignInRequest,
  HandlerSignInResponse,
  ModelUser,
  RequestUpdateUserRequest,
  V1TaskIndexResponse
} from '../model'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get user tasks
 * @summary Get user tasks
 */
export const getApiV1Tasks = (
    params?: GetApiV1TasksParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<V1TaskIndexResponse>(
      {url: `/api/v1/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1TasksQueryKey = (params?: GetApiV1TasksParams,) => {
    return [`/api/v1/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1TasksQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Tasks>>, TError = ErrorType<HandlerAPIError>>(params?: GetApiV1TasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Tasks>>> = ({ signal }) => getApiV1Tasks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TasksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Tasks>>>
export type GetApiV1TasksQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user tasks
 */
export const useGetApiV1Tasks = <TData = Awaited<ReturnType<typeof getApiV1Tasks>>, TError = ErrorType<HandlerAPIError>>(
 params?: GetApiV1TasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TasksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1TasksSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Tasks>>, TError = ErrorType<HandlerAPIError>>(params?: GetApiV1TasksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Tasks>>> = ({ signal }) => getApiV1Tasks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TasksSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Tasks>>>
export type GetApiV1TasksSuspenseQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user tasks
 */
export const useGetApiV1TasksSuspense = <TData = Awaited<ReturnType<typeof getApiV1Tasks>>, TError = ErrorType<HandlerAPIError>>(
 params?: GetApiV1TasksParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TasksSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1TasksSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Tasks>>>, TError = ErrorType<HandlerAPIError>>(params?: GetApiV1TasksParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Tasks>>> = ({ signal }) => getApiV1Tasks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TasksSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Tasks>>>
export type GetApiV1TasksSuspenseInfiniteQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user tasks
 */
export const useGetApiV1TasksSuspenseInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Tasks>>>, TError = ErrorType<HandlerAPIError>>(
 params?: GetApiV1TasksParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Tasks>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TasksSuspenseInfiniteQueryOptions(params,options)

  const query = useSuspenseInfiniteQuery(queryOptions) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get user profile
 * @summary Get user profile
 */
export const getApiV1UsersMe = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ModelUser>(
      {url: `/api/v1/users/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1UsersMeQueryKey = () => {
    return [`/api/v1/users/me`] as const;
    }

    
export const getGetApiV1UsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1UsersMe>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({ signal }) => getApiV1UsersMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1UsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersMe>>>
export type GetApiV1UsersMeQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user profile
 */
export const useGetApiV1UsersMe = <TData = Awaited<ReturnType<typeof getApiV1UsersMe>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1UsersMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1UsersMeSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1UsersMe>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({ signal }) => getApiV1UsersMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1UsersMeSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersMe>>>
export type GetApiV1UsersMeSuspenseQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user profile
 */
export const useGetApiV1UsersMeSuspense = <TData = Awaited<ReturnType<typeof getApiV1UsersMe>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1UsersMeSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1UsersMeSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersMe>>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({ signal }) => getApiV1UsersMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1UsersMeSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersMe>>>
export type GetApiV1UsersMeSuspenseInfiniteQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Get user profile
 */
export const useGetApiV1UsersMeSuspenseInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersMe>>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1UsersMeSuspenseInfiniteQueryOptions(options)

  const query = useSuspenseInfiniteQuery(queryOptions) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update user profile
 * @summary Update user profile
 */
export const putApiV1UsersMe = (
    requestUpdateUserRequest: RequestUpdateUserRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ModelUser>(
      {url: `/api/v1/users/me`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requestUpdateUserRequest
    },
      options);
    }
  


export const getPutApiV1UsersMeMutationOptions = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersMe>>, TError,{data: RequestUpdateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersMe>>, TError,{data: RequestUpdateUserRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1UsersMe>>, {data: RequestUpdateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  putApiV1UsersMe(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiV1UsersMeMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1UsersMe>>>
    export type PutApiV1UsersMeMutationBody = RequestUpdateUserRequest
    export type PutApiV1UsersMeMutationError = ErrorType<HandlerAPIError>

    /**
 * @summary Update user profile
 */
export const usePutApiV1UsersMe = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersMe>>, TError,{data: RequestUpdateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPutApiV1UsersMeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Protected route
 * @summary Protected
 */
export const getAuthProtected = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<HandlerProtectedResponse>(
      {url: `/auth/protected`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthProtectedQueryKey = () => {
    return [`/auth/protected`] as const;
    }

    
export const getGetAuthProtectedQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtected = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAuthProtectedSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedSuspenseQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtectedSuspense = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAuthProtectedSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   retry: 0, staleTime: 10000,  ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedSuspenseInfiniteQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtectedSuspenseInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedSuspenseInfiniteQueryOptions(options)

  const query = useSuspenseInfiniteQuery(queryOptions) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Sign in with OAuth
 * @summary Sign in
 */
export const postAuthSignin = (
    handlerSignInRequest: HandlerSignInRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<HandlerSignInResponse>(
      {url: `/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: handlerSignInRequest
    },
      options);
    }
  


export const getPostAuthSigninMutationOptions = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignin>>, {data: HandlerSignInRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignin(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostAuthSigninMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignin>>>
    export type PostAuthSigninMutationBody = HandlerSignInRequest
    export type PostAuthSigninMutationError = ErrorType<HandlerAPIError>

    /**
 * @summary Sign in
 */
export const usePostAuthSignin = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostAuthSigninMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
