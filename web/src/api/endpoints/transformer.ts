/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Falcon API
 * This is a crypto trading bot API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  HandlerAPIError,
  HandlerProtectedResponse,
  HandlerSignInRequest,
  HandlerSignInResponse
} from '../model'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Protected route
 * @summary Protected
 */
export const getAuthProtected = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<HandlerProtectedResponse>(
      {url: `/auth/protected`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthProtectedQueryKey = () => {
    return [`/auth/protected`] as const;
    }

    
export const getGetAuthProtectedInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedInfiniteQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtectedInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAuthProtectedQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtected = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAuthProtectedSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedSuspenseQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtectedSuspense = <TData = Awaited<ReturnType<typeof getAuthProtected>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAuthProtectedSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>( options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProtectedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProtected>>> = ({ signal }) => getAuthProtected(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAuthProtectedSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProtected>>>
export type GetAuthProtectedSuspenseInfiniteQueryError = ErrorType<HandlerAPIError>

/**
 * @summary Protected
 */
export const useGetAuthProtectedSuspenseInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getAuthProtected>>>, TError = ErrorType<HandlerAPIError>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthProtected>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProtectedSuspenseInfiniteQueryOptions(options)

  const query = useSuspenseInfiniteQuery(queryOptions) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Sign in with OAuth
 * @summary Sign in
 */
export const postAuthSignin = (
    handlerSignInRequest: HandlerSignInRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<HandlerSignInResponse>(
      {url: `/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: handlerSignInRequest
    },
      options);
    }
  


export const getPostAuthSigninMutationOptions = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignin>>, {data: HandlerSignInRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignin(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostAuthSigninMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignin>>>
    export type PostAuthSigninMutationBody = HandlerSignInRequest
    export type PostAuthSigninMutationError = ErrorType<HandlerAPIError>

    /**
 * @summary Sign in
 */
export const usePostAuthSignin = <TError = ErrorType<HandlerAPIError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignin>>, TError,{data: HandlerSignInRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostAuthSigninMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
