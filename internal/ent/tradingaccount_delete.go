// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/predicate"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
)

// TradingAccountDelete is the builder for deleting a TradingAccount entity.
type TradingAccountDelete struct {
	config
	hooks    []Hook
	mutation *TradingAccountMutation
}

// Where appends a list predicates to the TradingAccountDelete builder.
func (tad *TradingAccountDelete) Where(ps ...predicate.TradingAccount) *TradingAccountDelete {
	tad.mutation.Where(ps...)
	return tad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tad *TradingAccountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tad.sqlExec, tad.mutation, tad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tad *TradingAccountDelete) ExecX(ctx context.Context) int {
	n, err := tad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tad *TradingAccountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tradingaccount.Table, sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeUint64))
	if ps := tad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tad.mutation.done = true
	return affected, err
}

// TradingAccountDeleteOne is the builder for deleting a single TradingAccount entity.
type TradingAccountDeleteOne struct {
	tad *TradingAccountDelete
}

// Where appends a list predicates to the TradingAccountDelete builder.
func (tado *TradingAccountDeleteOne) Where(ps ...predicate.TradingAccount) *TradingAccountDeleteOne {
	tado.tad.mutation.Where(ps...)
	return tado
}

// Exec executes the deletion query.
func (tado *TradingAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := tado.tad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tradingaccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tado *TradingAccountDeleteOne) ExecX(ctx context.Context) {
	if err := tado.Exec(ctx); err != nil {
		panic(err)
	}
}
