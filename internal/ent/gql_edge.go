// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Authentication) User(ctx context.Context) (*User, error) {
	result, err := a.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryUser().Only(ctx)
	}
	return result, err
}

func (t *Task) TradingAccount(ctx context.Context) (*TradingAccount, error) {
	result, err := t.Edges.TradingAccountOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTradingAccount().Only(ctx)
	}
	return result, err
}

func (t *Task) TaskHistories(ctx context.Context) (result []*TaskHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTaskHistories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TaskHistoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTaskHistories().All(ctx)
	}
	return result, err
}

func (th *TaskHistory) Task(ctx context.Context) (*Task, error) {
	result, err := th.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = th.QueryTask().Only(ctx)
	}
	return result, err
}

func (ta *TradingAccount) User(ctx context.Context) (*User, error) {
	result, err := ta.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ta.QueryUser().Only(ctx)
	}
	return result, err
}

func (ta *TradingAccount) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ta.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ta.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ta.QueryTasks().All(ctx)
	}
	return result, err
}

func (u *User) Authentications(ctx context.Context) (result []*Authentication, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAuthentications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AuthenticationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAuthentications().All(ctx)
	}
	return result, err
}

func (u *User) TradingAccounts(ctx context.Context) (result []*TradingAccount, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTradingAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TradingAccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTradingAccounts().All(ctx)
	}
	return result, err
}
