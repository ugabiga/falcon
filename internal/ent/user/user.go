// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAuthentications holds the string denoting the authentications edge name in mutations.
	EdgeAuthentications = "authentications"
	// EdgeTradingAccounts holds the string denoting the trading_accounts edge name in mutations.
	EdgeTradingAccounts = "trading_accounts"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuthenticationsTable is the table that holds the authentications relation/edge.
	AuthenticationsTable = "authentications"
	// AuthenticationsInverseTable is the table name for the Authentication entity.
	// It exists in this package in order to avoid circular dependency with the "authentication" package.
	AuthenticationsInverseTable = "authentications"
	// AuthenticationsColumn is the table column denoting the authentications relation/edge.
	AuthenticationsColumn = "user_authentications"
	// TradingAccountsTable is the table that holds the trading_accounts relation/edge.
	TradingAccountsTable = "trading_accounts"
	// TradingAccountsInverseTable is the table name for the TradingAccount entity.
	// It exists in this package in order to avoid circular dependency with the "tradingaccount" package.
	TradingAccountsInverseTable = "trading_accounts"
	// TradingAccountsColumn is the table column denoting the trading_accounts relation/edge.
	TradingAccountsColumn = "user_trading_accounts"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAuthenticationsCount orders the results by authentications count.
func ByAuthenticationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthenticationsStep(), opts...)
	}
}

// ByAuthentications orders the results by authentications terms.
func ByAuthentications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthenticationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTradingAccountsCount orders the results by trading_accounts count.
func ByTradingAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTradingAccountsStep(), opts...)
	}
}

// ByTradingAccounts orders the results by trading_accounts terms.
func ByTradingAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTradingAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthenticationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthenticationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthenticationsTable, AuthenticationsColumn),
	)
}
func newTradingAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TradingAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TradingAccountsTable, TradingAccountsColumn),
	)
}
