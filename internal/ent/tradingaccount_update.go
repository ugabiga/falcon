// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/predicate"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// TradingAccountUpdate is the builder for updating TradingAccount entities.
type TradingAccountUpdate struct {
	config
	hooks    []Hook
	mutation *TradingAccountMutation
}

// Where appends a list predicates to the TradingAccountUpdate builder.
func (tau *TradingAccountUpdate) Where(ps ...predicate.TradingAccount) *TradingAccountUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetUserID sets the "user_id" field.
func (tau *TradingAccountUpdate) SetUserID(i int) *TradingAccountUpdate {
	tau.mutation.SetUserID(i)
	return tau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableUserID(i *int) *TradingAccountUpdate {
	if i != nil {
		tau.SetUserID(*i)
	}
	return tau
}

// SetExchange sets the "exchange" field.
func (tau *TradingAccountUpdate) SetExchange(s string) *TradingAccountUpdate {
	tau.mutation.SetExchange(s)
	return tau
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableExchange(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetExchange(*s)
	}
	return tau
}

// SetCurrency sets the "currency" field.
func (tau *TradingAccountUpdate) SetCurrency(s string) *TradingAccountUpdate {
	tau.mutation.SetCurrency(s)
	return tau
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableCurrency(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetCurrency(*s)
	}
	return tau
}

// SetIP sets the "ip" field.
func (tau *TradingAccountUpdate) SetIP(s string) *TradingAccountUpdate {
	tau.mutation.SetIP(s)
	return tau
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableIP(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetIP(*s)
	}
	return tau
}

// SetIdentifier sets the "identifier" field.
func (tau *TradingAccountUpdate) SetIdentifier(s string) *TradingAccountUpdate {
	tau.mutation.SetIdentifier(s)
	return tau
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableIdentifier(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetIdentifier(*s)
	}
	return tau
}

// SetCredential sets the "credential" field.
func (tau *TradingAccountUpdate) SetCredential(s string) *TradingAccountUpdate {
	tau.mutation.SetCredential(s)
	return tau
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillableCredential(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetCredential(*s)
	}
	return tau
}

// SetPhrase sets the "phrase" field.
func (tau *TradingAccountUpdate) SetPhrase(s string) *TradingAccountUpdate {
	tau.mutation.SetPhrase(s)
	return tau
}

// SetNillablePhrase sets the "phrase" field if the given value is not nil.
func (tau *TradingAccountUpdate) SetNillablePhrase(s *string) *TradingAccountUpdate {
	if s != nil {
		tau.SetPhrase(*s)
	}
	return tau
}

// ClearPhrase clears the value of the "phrase" field.
func (tau *TradingAccountUpdate) ClearPhrase() *TradingAccountUpdate {
	tau.mutation.ClearPhrase()
	return tau
}

// SetUpdatedAt sets the "updated_at" field.
func (tau *TradingAccountUpdate) SetUpdatedAt(t time.Time) *TradingAccountUpdate {
	tau.mutation.SetUpdatedAt(t)
	return tau
}

// SetUser sets the "user" edge to the User entity.
func (tau *TradingAccountUpdate) SetUser(u *User) *TradingAccountUpdate {
	return tau.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tau *TradingAccountUpdate) AddTaskIDs(ids ...int) *TradingAccountUpdate {
	tau.mutation.AddTaskIDs(ids...)
	return tau
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tau *TradingAccountUpdate) AddTasks(t ...*Task) *TradingAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tau.AddTaskIDs(ids...)
}

// Mutation returns the TradingAccountMutation object of the builder.
func (tau *TradingAccountUpdate) Mutation() *TradingAccountMutation {
	return tau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tau *TradingAccountUpdate) ClearUser() *TradingAccountUpdate {
	tau.mutation.ClearUser()
	return tau
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tau *TradingAccountUpdate) ClearTasks() *TradingAccountUpdate {
	tau.mutation.ClearTasks()
	return tau
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tau *TradingAccountUpdate) RemoveTaskIDs(ids ...int) *TradingAccountUpdate {
	tau.mutation.RemoveTaskIDs(ids...)
	return tau
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tau *TradingAccountUpdate) RemoveTasks(t ...*Task) *TradingAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tau.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TradingAccountUpdate) Save(ctx context.Context) (int, error) {
	tau.defaults()
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TradingAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TradingAccountUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TradingAccountUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tau *TradingAccountUpdate) defaults() {
	if _, ok := tau.mutation.UpdatedAt(); !ok {
		v := tradingaccount.UpdateDefaultUpdatedAt()
		tau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TradingAccountUpdate) check() error {
	if v, ok := tau.mutation.UserID(); ok {
		if err := tradingaccount.UserIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "TradingAccount.user_id": %w`, err)}
		}
	}
	if _, ok := tau.mutation.UserID(); tau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TradingAccount.user"`)
	}
	return nil
}

func (tau *TradingAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tradingaccount.Table, tradingaccount.Columns, sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Exchange(); ok {
		_spec.SetField(tradingaccount.FieldExchange, field.TypeString, value)
	}
	if value, ok := tau.mutation.Currency(); ok {
		_spec.SetField(tradingaccount.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tau.mutation.IP(); ok {
		_spec.SetField(tradingaccount.FieldIP, field.TypeString, value)
	}
	if value, ok := tau.mutation.Identifier(); ok {
		_spec.SetField(tradingaccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := tau.mutation.Credential(); ok {
		_spec.SetField(tradingaccount.FieldCredential, field.TypeString, value)
	}
	if value, ok := tau.mutation.Phrase(); ok {
		_spec.SetField(tradingaccount.FieldPhrase, field.TypeString, value)
	}
	if tau.mutation.PhraseCleared() {
		_spec.ClearField(tradingaccount.FieldPhrase, field.TypeString)
	}
	if value, ok := tau.mutation.UpdatedAt(); ok {
		_spec.SetField(tradingaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if tau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingaccount.UserTable,
			Columns: []string{tradingaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingaccount.UserTable,
			Columns: []string{tradingaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tau.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TradingAccountUpdateOne is the builder for updating a single TradingAccount entity.
type TradingAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TradingAccountMutation
}

// SetUserID sets the "user_id" field.
func (tauo *TradingAccountUpdateOne) SetUserID(i int) *TradingAccountUpdateOne {
	tauo.mutation.SetUserID(i)
	return tauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableUserID(i *int) *TradingAccountUpdateOne {
	if i != nil {
		tauo.SetUserID(*i)
	}
	return tauo
}

// SetExchange sets the "exchange" field.
func (tauo *TradingAccountUpdateOne) SetExchange(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetExchange(s)
	return tauo
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableExchange(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetExchange(*s)
	}
	return tauo
}

// SetCurrency sets the "currency" field.
func (tauo *TradingAccountUpdateOne) SetCurrency(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetCurrency(s)
	return tauo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableCurrency(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetCurrency(*s)
	}
	return tauo
}

// SetIP sets the "ip" field.
func (tauo *TradingAccountUpdateOne) SetIP(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetIP(s)
	return tauo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableIP(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetIP(*s)
	}
	return tauo
}

// SetIdentifier sets the "identifier" field.
func (tauo *TradingAccountUpdateOne) SetIdentifier(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetIdentifier(s)
	return tauo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableIdentifier(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetIdentifier(*s)
	}
	return tauo
}

// SetCredential sets the "credential" field.
func (tauo *TradingAccountUpdateOne) SetCredential(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetCredential(s)
	return tauo
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillableCredential(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetCredential(*s)
	}
	return tauo
}

// SetPhrase sets the "phrase" field.
func (tauo *TradingAccountUpdateOne) SetPhrase(s string) *TradingAccountUpdateOne {
	tauo.mutation.SetPhrase(s)
	return tauo
}

// SetNillablePhrase sets the "phrase" field if the given value is not nil.
func (tauo *TradingAccountUpdateOne) SetNillablePhrase(s *string) *TradingAccountUpdateOne {
	if s != nil {
		tauo.SetPhrase(*s)
	}
	return tauo
}

// ClearPhrase clears the value of the "phrase" field.
func (tauo *TradingAccountUpdateOne) ClearPhrase() *TradingAccountUpdateOne {
	tauo.mutation.ClearPhrase()
	return tauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tauo *TradingAccountUpdateOne) SetUpdatedAt(t time.Time) *TradingAccountUpdateOne {
	tauo.mutation.SetUpdatedAt(t)
	return tauo
}

// SetUser sets the "user" edge to the User entity.
func (tauo *TradingAccountUpdateOne) SetUser(u *User) *TradingAccountUpdateOne {
	return tauo.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tauo *TradingAccountUpdateOne) AddTaskIDs(ids ...int) *TradingAccountUpdateOne {
	tauo.mutation.AddTaskIDs(ids...)
	return tauo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tauo *TradingAccountUpdateOne) AddTasks(t ...*Task) *TradingAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tauo.AddTaskIDs(ids...)
}

// Mutation returns the TradingAccountMutation object of the builder.
func (tauo *TradingAccountUpdateOne) Mutation() *TradingAccountMutation {
	return tauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tauo *TradingAccountUpdateOne) ClearUser() *TradingAccountUpdateOne {
	tauo.mutation.ClearUser()
	return tauo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tauo *TradingAccountUpdateOne) ClearTasks() *TradingAccountUpdateOne {
	tauo.mutation.ClearTasks()
	return tauo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tauo *TradingAccountUpdateOne) RemoveTaskIDs(ids ...int) *TradingAccountUpdateOne {
	tauo.mutation.RemoveTaskIDs(ids...)
	return tauo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tauo *TradingAccountUpdateOne) RemoveTasks(t ...*Task) *TradingAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tauo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the TradingAccountUpdate builder.
func (tauo *TradingAccountUpdateOne) Where(ps ...predicate.TradingAccount) *TradingAccountUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TradingAccountUpdateOne) Select(field string, fields ...string) *TradingAccountUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TradingAccount entity.
func (tauo *TradingAccountUpdateOne) Save(ctx context.Context) (*TradingAccount, error) {
	tauo.defaults()
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TradingAccountUpdateOne) SaveX(ctx context.Context) *TradingAccount {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TradingAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TradingAccountUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tauo *TradingAccountUpdateOne) defaults() {
	if _, ok := tauo.mutation.UpdatedAt(); !ok {
		v := tradingaccount.UpdateDefaultUpdatedAt()
		tauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TradingAccountUpdateOne) check() error {
	if v, ok := tauo.mutation.UserID(); ok {
		if err := tradingaccount.UserIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "TradingAccount.user_id": %w`, err)}
		}
	}
	if _, ok := tauo.mutation.UserID(); tauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TradingAccount.user"`)
	}
	return nil
}

func (tauo *TradingAccountUpdateOne) sqlSave(ctx context.Context) (_node *TradingAccount, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tradingaccount.Table, tradingaccount.Columns, sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TradingAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tradingaccount.FieldID)
		for _, f := range fields {
			if !tradingaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tradingaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Exchange(); ok {
		_spec.SetField(tradingaccount.FieldExchange, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Currency(); ok {
		_spec.SetField(tradingaccount.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tauo.mutation.IP(); ok {
		_spec.SetField(tradingaccount.FieldIP, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Identifier(); ok {
		_spec.SetField(tradingaccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Credential(); ok {
		_spec.SetField(tradingaccount.FieldCredential, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Phrase(); ok {
		_spec.SetField(tradingaccount.FieldPhrase, field.TypeString, value)
	}
	if tauo.mutation.PhraseCleared() {
		_spec.ClearField(tradingaccount.FieldPhrase, field.TypeString)
	}
	if value, ok := tauo.mutation.UpdatedAt(); ok {
		_spec.SetField(tradingaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if tauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingaccount.UserTable,
			Columns: []string{tradingaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingaccount.UserTable,
			Columns: []string{tradingaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tauo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TradingAccount{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
