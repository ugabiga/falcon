// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/predicate"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/taskhistory"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTradingAccountID sets the "trading_account_id" field.
func (tu *TaskUpdate) SetTradingAccountID(i int) *TaskUpdate {
	tu.mutation.SetTradingAccountID(i)
	return tu
}

// SetNillableTradingAccountID sets the "trading_account_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTradingAccountID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTradingAccountID(*i)
	}
	return tu
}

// SetCurrency sets the "currency" field.
func (tu *TaskUpdate) SetCurrency(s string) *TaskUpdate {
	tu.mutation.SetCurrency(s)
	return tu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCurrency(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCurrency(*s)
	}
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TaskUpdate) SetAmount(f float64) *TaskUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAmount(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetAmount(*f)
	}
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TaskUpdate) AddAmount(f float64) *TaskUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetCron sets the "cron" field.
func (tu *TaskUpdate) SetCron(s string) *TaskUpdate {
	tu.mutation.SetCron(s)
	return tu
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCron(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCron(*s)
	}
	return tu
}

// SetNextExecutionTime sets the "next_execution_time" field.
func (tu *TaskUpdate) SetNextExecutionTime(t time.Time) *TaskUpdate {
	tu.mutation.SetNextExecutionTime(t)
	return tu
}

// SetNillableNextExecutionTime sets the "next_execution_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNextExecutionTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetNextExecutionTime(*t)
	}
	return tu
}

// ClearNextExecutionTime clears the value of the "next_execution_time" field.
func (tu *TaskUpdate) ClearNextExecutionTime() *TaskUpdate {
	tu.mutation.ClearNextExecutionTime()
	return tu
}

// SetIsActive sets the "is_active" field.
func (tu *TaskUpdate) SetIsActive(b bool) *TaskUpdate {
	tu.mutation.SetIsActive(b)
	return tu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsActive(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsActive(*b)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(s string) *TaskUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetParams sets the "params" field.
func (tu *TaskUpdate) SetParams(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetParams(m)
	return tu
}

// ClearParams clears the value of the "params" field.
func (tu *TaskUpdate) ClearParams() *TaskUpdate {
	tu.mutation.ClearParams()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTradingAccount sets the "trading_account" edge to the TradingAccount entity.
func (tu *TaskUpdate) SetTradingAccount(t *TradingAccount) *TaskUpdate {
	return tu.SetTradingAccountID(t.ID)
}

// AddTaskHistoryIDs adds the "task_histories" edge to the TaskHistory entity by IDs.
func (tu *TaskUpdate) AddTaskHistoryIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddTaskHistoryIDs(ids...)
	return tu
}

// AddTaskHistories adds the "task_histories" edges to the TaskHistory entity.
func (tu *TaskUpdate) AddTaskHistories(t ...*TaskHistory) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskHistoryIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTradingAccount clears the "trading_account" edge to the TradingAccount entity.
func (tu *TaskUpdate) ClearTradingAccount() *TaskUpdate {
	tu.mutation.ClearTradingAccount()
	return tu
}

// ClearTaskHistories clears all "task_histories" edges to the TaskHistory entity.
func (tu *TaskUpdate) ClearTaskHistories() *TaskUpdate {
	tu.mutation.ClearTaskHistories()
	return tu
}

// RemoveTaskHistoryIDs removes the "task_histories" edge to TaskHistory entities by IDs.
func (tu *TaskUpdate) RemoveTaskHistoryIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveTaskHistoryIDs(ids...)
	return tu
}

// RemoveTaskHistories removes "task_histories" edges to TaskHistory entities.
func (tu *TaskUpdate) RemoveTaskHistories(t ...*TaskHistory) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.TradingAccountID(); ok {
		if err := task.TradingAccountIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "trading_account_id", err: fmt.Errorf(`ent: validator failed for field "Task.trading_account_id": %w`, err)}
		}
	}
	if _, ok := tu.mutation.TradingAccountID(); tu.mutation.TradingAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.trading_account"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Currency(); ok {
		_spec.SetField(task.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(task.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(task.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Cron(); ok {
		_spec.SetField(task.FieldCron, field.TypeString, value)
	}
	if value, ok := tu.mutation.NextExecutionTime(); ok {
		_spec.SetField(task.FieldNextExecutionTime, field.TypeTime, value)
	}
	if tu.mutation.NextExecutionTimeCleared() {
		_spec.ClearField(task.FieldNextExecutionTime, field.TypeTime)
	}
	if value, ok := tu.mutation.IsActive(); ok {
		_spec.SetField(task.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
	}
	if tu.mutation.ParamsCleared() {
		_spec.ClearField(task.FieldParams, field.TypeJSON)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.TradingAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TradingAccountTable,
			Columns: []string{task.TradingAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TradingAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TradingAccountTable,
			Columns: []string{task.TradingAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskHistoriesIDs(); len(nodes) > 0 && !tu.mutation.TaskHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTradingAccountID sets the "trading_account_id" field.
func (tuo *TaskUpdateOne) SetTradingAccountID(i int) *TaskUpdateOne {
	tuo.mutation.SetTradingAccountID(i)
	return tuo
}

// SetNillableTradingAccountID sets the "trading_account_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTradingAccountID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTradingAccountID(*i)
	}
	return tuo
}

// SetCurrency sets the "currency" field.
func (tuo *TaskUpdateOne) SetCurrency(s string) *TaskUpdateOne {
	tuo.mutation.SetCurrency(s)
	return tuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCurrency(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCurrency(*s)
	}
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TaskUpdateOne) SetAmount(f float64) *TaskUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAmount(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetAmount(*f)
	}
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TaskUpdateOne) AddAmount(f float64) *TaskUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetCron sets the "cron" field.
func (tuo *TaskUpdateOne) SetCron(s string) *TaskUpdateOne {
	tuo.mutation.SetCron(s)
	return tuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCron(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCron(*s)
	}
	return tuo
}

// SetNextExecutionTime sets the "next_execution_time" field.
func (tuo *TaskUpdateOne) SetNextExecutionTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetNextExecutionTime(t)
	return tuo
}

// SetNillableNextExecutionTime sets the "next_execution_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNextExecutionTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetNextExecutionTime(*t)
	}
	return tuo
}

// ClearNextExecutionTime clears the value of the "next_execution_time" field.
func (tuo *TaskUpdateOne) ClearNextExecutionTime() *TaskUpdateOne {
	tuo.mutation.ClearNextExecutionTime()
	return tuo
}

// SetIsActive sets the "is_active" field.
func (tuo *TaskUpdateOne) SetIsActive(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsActive(b)
	return tuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsActive(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsActive(*b)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(s string) *TaskUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetParams sets the "params" field.
func (tuo *TaskUpdateOne) SetParams(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetParams(m)
	return tuo
}

// ClearParams clears the value of the "params" field.
func (tuo *TaskUpdateOne) ClearParams() *TaskUpdateOne {
	tuo.mutation.ClearParams()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTradingAccount sets the "trading_account" edge to the TradingAccount entity.
func (tuo *TaskUpdateOne) SetTradingAccount(t *TradingAccount) *TaskUpdateOne {
	return tuo.SetTradingAccountID(t.ID)
}

// AddTaskHistoryIDs adds the "task_histories" edge to the TaskHistory entity by IDs.
func (tuo *TaskUpdateOne) AddTaskHistoryIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddTaskHistoryIDs(ids...)
	return tuo
}

// AddTaskHistories adds the "task_histories" edges to the TaskHistory entity.
func (tuo *TaskUpdateOne) AddTaskHistories(t ...*TaskHistory) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskHistoryIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTradingAccount clears the "trading_account" edge to the TradingAccount entity.
func (tuo *TaskUpdateOne) ClearTradingAccount() *TaskUpdateOne {
	tuo.mutation.ClearTradingAccount()
	return tuo
}

// ClearTaskHistories clears all "task_histories" edges to the TaskHistory entity.
func (tuo *TaskUpdateOne) ClearTaskHistories() *TaskUpdateOne {
	tuo.mutation.ClearTaskHistories()
	return tuo
}

// RemoveTaskHistoryIDs removes the "task_histories" edge to TaskHistory entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskHistoryIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveTaskHistoryIDs(ids...)
	return tuo
}

// RemoveTaskHistories removes "task_histories" edges to TaskHistory entities.
func (tuo *TaskUpdateOne) RemoveTaskHistories(t ...*TaskHistory) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskHistoryIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.TradingAccountID(); ok {
		if err := task.TradingAccountIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "trading_account_id", err: fmt.Errorf(`ent: validator failed for field "Task.trading_account_id": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.TradingAccountID(); tuo.mutation.TradingAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.trading_account"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Currency(); ok {
		_spec.SetField(task.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(task.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(task.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Cron(); ok {
		_spec.SetField(task.FieldCron, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NextExecutionTime(); ok {
		_spec.SetField(task.FieldNextExecutionTime, field.TypeTime, value)
	}
	if tuo.mutation.NextExecutionTimeCleared() {
		_spec.ClearField(task.FieldNextExecutionTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.IsActive(); ok {
		_spec.SetField(task.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
	}
	if tuo.mutation.ParamsCleared() {
		_spec.ClearField(task.FieldParams, field.TypeJSON)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.TradingAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TradingAccountTable,
			Columns: []string{task.TradingAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TradingAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TradingAccountTable,
			Columns: []string{task.TradingAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskHistoriesIDs(); len(nodes) > 0 && !tuo.mutation.TaskHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
