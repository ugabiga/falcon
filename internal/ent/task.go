// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TradingAccountID holds the value of the "trading_account_id" field.
	TradingAccountID int `json:"trading_account_id,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Amount of currency to buy/sell
	Amount float64 `json:"amount,omitempty"`
	// Cron holds the value of the "cron" field.
	Cron string `json:"cron,omitempty"`
	// NextExecutionTime holds the value of the "next_execution_time" field.
	NextExecutionTime time.Time `json:"next_execution_time,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Params holds the value of the "params" field.
	Params map[string]interface{} `json:"params,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// TradingAccount holds the value of the trading_account edge.
	TradingAccount *TradingAccount `json:"trading_account,omitempty"`
	// TaskHistories holds the value of the task_histories edge.
	TaskHistories []*TaskHistory `json:"task_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTaskHistories map[string][]*TaskHistory
}

// TradingAccountOrErr returns the TradingAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) TradingAccountOrErr() (*TradingAccount, error) {
	if e.loadedTypes[0] {
		if e.TradingAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tradingaccount.Label}
		}
		return e.TradingAccount, nil
	}
	return nil, &NotLoadedError{edge: "trading_account"}
}

// TaskHistoriesOrErr returns the TaskHistories value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) TaskHistoriesOrErr() ([]*TaskHistory, error) {
	if e.loadedTypes[1] {
		return e.TaskHistories, nil
	}
	return nil, &NotLoadedError{edge: "task_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldParams:
			values[i] = new([]byte)
		case task.FieldIsActive:
			values[i] = new(sql.NullBool)
		case task.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case task.FieldID, task.FieldTradingAccountID:
			values[i] = new(sql.NullInt64)
		case task.FieldCurrency, task.FieldCron, task.FieldType:
			values[i] = new(sql.NullString)
		case task.FieldNextExecutionTime, task.FieldUpdatedAt, task.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = int(value.Int64)
			}
		case task.FieldTradingAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trading_account_id", values[i])
			} else if value.Valid {
				t.TradingAccountID = int(value.Int64)
			}
		case task.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				t.Currency = value.String
			}
		case task.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case task.FieldCron:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				t.Cron = value.String
			}
		case task.FieldNextExecutionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_execution_time", values[i])
			} else if value.Valid {
				t.NextExecutionTime = value.Time
			}
		case task.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				t.IsActive = value.Bool
			}
		case task.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case task.FieldParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Params); err != nil {
					return fmt.Errorf("unmarshal field params: %w", err)
				}
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTradingAccount queries the "trading_account" edge of the Task entity.
func (t *Task) QueryTradingAccount() *TradingAccountQuery {
	return NewTaskClient(t.config).QueryTradingAccount(t)
}

// QueryTaskHistories queries the "task_histories" edge of the Task entity.
func (t *Task) QueryTaskHistories() *TaskHistoryQuery {
	return NewTaskClient(t.config).QueryTaskHistories(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("trading_account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TradingAccountID))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(t.Currency)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("cron=")
	builder.WriteString(t.Cron)
	builder.WriteString(", ")
	builder.WriteString("next_execution_time=")
	builder.WriteString(t.NextExecutionTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", t.IsActive))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(fmt.Sprintf("%v", t.Params))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTaskHistories returns the TaskHistories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedTaskHistories(name string) ([]*TaskHistory, error) {
	if t.Edges.namedTaskHistories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTaskHistories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedTaskHistories(name string, edges ...*TaskHistory) {
	if t.Edges.namedTaskHistories == nil {
		t.Edges.namedTaskHistories = make(map[string][]*TaskHistory)
	}
	if len(edges) == 0 {
		t.Edges.namedTaskHistories[name] = []*TaskHistory{}
	} else {
		t.Edges.namedTaskHistories[name] = append(t.Edges.namedTaskHistories[name], edges...)
	}
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
