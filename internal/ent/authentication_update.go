// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/authentication"
	"github.com/ugabiga/falcon/internal/ent/predicate"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// AuthenticationUpdate is the builder for updating Authentication entities.
type AuthenticationUpdate struct {
	config
	hooks    []Hook
	mutation *AuthenticationMutation
}

// Where appends a list predicates to the AuthenticationUpdate builder.
func (au *AuthenticationUpdate) Where(ps ...predicate.Authentication) *AuthenticationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetProvider sets the "provider" field.
func (au *AuthenticationUpdate) SetProvider(a authentication.Provider) *AuthenticationUpdate {
	au.mutation.SetProvider(a)
	return au
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableProvider(a *authentication.Provider) *AuthenticationUpdate {
	if a != nil {
		au.SetProvider(*a)
	}
	return au
}

// SetIdentifier sets the "identifier" field.
func (au *AuthenticationUpdate) SetIdentifier(s string) *AuthenticationUpdate {
	au.mutation.SetIdentifier(s)
	return au
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableIdentifier(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetIdentifier(*s)
	}
	return au
}

// SetCredential sets the "credential" field.
func (au *AuthenticationUpdate) SetCredential(s string) *AuthenticationUpdate {
	au.mutation.SetCredential(s)
	return au
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableCredential(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetCredential(*s)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AuthenticationUpdate) SetUpdatedAt(t time.Time) *AuthenticationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AuthenticationUpdate) SetUserID(id uint64) *AuthenticationUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableUserID(id *uint64) *AuthenticationUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AuthenticationUpdate) SetUser(u *User) *AuthenticationUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AuthenticationMutation object of the builder.
func (au *AuthenticationUpdate) Mutation() *AuthenticationMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AuthenticationUpdate) ClearUser() *AuthenticationUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthenticationUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthenticationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthenticationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthenticationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AuthenticationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := authentication.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthenticationUpdate) check() error {
	if v, ok := au.mutation.Provider(); ok {
		if err := authentication.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Authentication.provider": %w`, err)}
		}
	}
	return nil
}

func (au *AuthenticationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authentication.Table, authentication.Columns, sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Provider(); ok {
		_spec.SetField(authentication.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Identifier(); ok {
		_spec.SetField(authentication.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := au.mutation.Credential(); ok {
		_spec.SetField(authentication.FieldCredential, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(authentication.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authentication.UserTable,
			Columns: []string{authentication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authentication.UserTable,
			Columns: []string{authentication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authentication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthenticationUpdateOne is the builder for updating a single Authentication entity.
type AuthenticationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthenticationMutation
}

// SetProvider sets the "provider" field.
func (auo *AuthenticationUpdateOne) SetProvider(a authentication.Provider) *AuthenticationUpdateOne {
	auo.mutation.SetProvider(a)
	return auo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableProvider(a *authentication.Provider) *AuthenticationUpdateOne {
	if a != nil {
		auo.SetProvider(*a)
	}
	return auo
}

// SetIdentifier sets the "identifier" field.
func (auo *AuthenticationUpdateOne) SetIdentifier(s string) *AuthenticationUpdateOne {
	auo.mutation.SetIdentifier(s)
	return auo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableIdentifier(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetIdentifier(*s)
	}
	return auo
}

// SetCredential sets the "credential" field.
func (auo *AuthenticationUpdateOne) SetCredential(s string) *AuthenticationUpdateOne {
	auo.mutation.SetCredential(s)
	return auo
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableCredential(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetCredential(*s)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AuthenticationUpdateOne) SetUpdatedAt(t time.Time) *AuthenticationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AuthenticationUpdateOne) SetUserID(id uint64) *AuthenticationUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableUserID(id *uint64) *AuthenticationUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AuthenticationUpdateOne) SetUser(u *User) *AuthenticationUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AuthenticationMutation object of the builder.
func (auo *AuthenticationUpdateOne) Mutation() *AuthenticationMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AuthenticationUpdateOne) ClearUser() *AuthenticationUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AuthenticationUpdate builder.
func (auo *AuthenticationUpdateOne) Where(ps ...predicate.Authentication) *AuthenticationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthenticationUpdateOne) Select(field string, fields ...string) *AuthenticationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Authentication entity.
func (auo *AuthenticationUpdateOne) Save(ctx context.Context) (*Authentication, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthenticationUpdateOne) SaveX(ctx context.Context) *Authentication {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthenticationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthenticationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AuthenticationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := authentication.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthenticationUpdateOne) check() error {
	if v, ok := auo.mutation.Provider(); ok {
		if err := authentication.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Authentication.provider": %w`, err)}
		}
	}
	return nil
}

func (auo *AuthenticationUpdateOne) sqlSave(ctx context.Context) (_node *Authentication, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authentication.Table, authentication.Columns, sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Authentication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authentication.FieldID)
		for _, f := range fields {
			if !authentication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authentication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Provider(); ok {
		_spec.SetField(authentication.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Identifier(); ok {
		_spec.SetField(authentication.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := auo.mutation.Credential(); ok {
		_spec.SetField(authentication.FieldCredential, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(authentication.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authentication.UserTable,
			Columns: []string{authentication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authentication.UserTable,
			Columns: []string{authentication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Authentication{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authentication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
