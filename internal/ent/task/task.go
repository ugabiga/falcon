// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTradingAccountID holds the string denoting the trading_account_id field in the database.
	FieldTradingAccountID = "trading_account_id"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldCryptoCurrency holds the string denoting the crypto_currency field in the database.
	FieldCryptoCurrency = "crypto_currency"
	// FieldCron holds the string denoting the cron field in the database.
	FieldCron = "cron"
	// FieldNextExecutionTime holds the string denoting the next_execution_time field in the database.
	FieldNextExecutionTime = "next_execution_time"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTradingAccount holds the string denoting the trading_account edge name in mutations.
	EdgeTradingAccount = "trading_account"
	// EdgeTaskHistories holds the string denoting the task_histories edge name in mutations.
	EdgeTaskHistories = "task_histories"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TradingAccountTable is the table that holds the trading_account relation/edge.
	TradingAccountTable = "tasks"
	// TradingAccountInverseTable is the table name for the TradingAccount entity.
	// It exists in this package in order to avoid circular dependency with the "tradingaccount" package.
	TradingAccountInverseTable = "trading_accounts"
	// TradingAccountColumn is the table column denoting the trading_account relation/edge.
	TradingAccountColumn = "trading_account_id"
	// TaskHistoriesTable is the table that holds the task_histories relation/edge.
	TaskHistoriesTable = "task_histories"
	// TaskHistoriesInverseTable is the table name for the TaskHistory entity.
	// It exists in this package in order to avoid circular dependency with the "taskhistory" package.
	TaskHistoriesInverseTable = "task_histories"
	// TaskHistoriesColumn is the table column denoting the task_histories relation/edge.
	TaskHistoriesColumn = "task_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTradingAccountID,
	FieldCurrency,
	FieldSize,
	FieldCryptoCurrency,
	FieldCron,
	FieldNextExecutionTime,
	FieldIsActive,
	FieldType,
	FieldParams,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TradingAccountIDValidator is a validator for the "trading_account_id" field. It is called by the builders before save.
	TradingAccountIDValidator func(int) error
	// DefaultSize holds the default value on creation for the "size" field.
	DefaultSize float64
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTradingAccountID orders the results by the trading_account_id field.
func ByTradingAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradingAccountID, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByCryptoCurrency orders the results by the crypto_currency field.
func ByCryptoCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCryptoCurrency, opts...).ToFunc()
}

// ByCron orders the results by the cron field.
func ByCron(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCron, opts...).ToFunc()
}

// ByNextExecutionTime orders the results by the next_execution_time field.
func ByNextExecutionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextExecutionTime, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTradingAccountField orders the results by trading_account field.
func ByTradingAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTradingAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskHistoriesCount orders the results by task_histories count.
func ByTaskHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskHistoriesStep(), opts...)
	}
}

// ByTaskHistories orders the results by task_histories terms.
func ByTaskHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTradingAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TradingAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TradingAccountTable, TradingAccountColumn),
	)
}
func newTaskHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskHistoriesTable, TaskHistoriesColumn),
	)
}
