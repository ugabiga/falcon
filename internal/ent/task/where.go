// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugabiga/falcon/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// TradingAccountID applies equality check predicate on the "trading_account_id" field. It's identical to TradingAccountIDEQ.
func TradingAccountID(v int) predicate.Task {
	vc := int(v)
	return predicate.Task(sql.FieldEQ(FieldTradingAccountID, vc))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCurrency, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAmount, v))
}

// CryptoCurrency applies equality check predicate on the "crypto_currency" field. It's identical to CryptoCurrencyEQ.
func CryptoCurrency(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCryptoCurrency, v))
}

// Cron applies equality check predicate on the "cron" field. It's identical to CronEQ.
func Cron(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCron, v))
}

// NextExecutionTime applies equality check predicate on the "next_execution_time" field. It's identical to NextExecutionTimeEQ.
func NextExecutionTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNextExecutionTime, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsActive, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// TradingAccountIDEQ applies the EQ predicate on the "trading_account_id" field.
func TradingAccountIDEQ(v int) predicate.Task {
	vc := int(v)
	return predicate.Task(sql.FieldEQ(FieldTradingAccountID, vc))
}

// TradingAccountIDNEQ applies the NEQ predicate on the "trading_account_id" field.
func TradingAccountIDNEQ(v int) predicate.Task {
	vc := int(v)
	return predicate.Task(sql.FieldNEQ(FieldTradingAccountID, vc))
}

// TradingAccountIDIn applies the In predicate on the "trading_account_id" field.
func TradingAccountIDIn(vs ...int) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Task(sql.FieldIn(FieldTradingAccountID, v...))
}

// TradingAccountIDNotIn applies the NotIn predicate on the "trading_account_id" field.
func TradingAccountIDNotIn(vs ...int) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Task(sql.FieldNotIn(FieldTradingAccountID, v...))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCurrency, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAmount, v))
}

// CryptoCurrencyEQ applies the EQ predicate on the "crypto_currency" field.
func CryptoCurrencyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCryptoCurrency, v))
}

// CryptoCurrencyNEQ applies the NEQ predicate on the "crypto_currency" field.
func CryptoCurrencyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCryptoCurrency, v))
}

// CryptoCurrencyIn applies the In predicate on the "crypto_currency" field.
func CryptoCurrencyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCryptoCurrency, vs...))
}

// CryptoCurrencyNotIn applies the NotIn predicate on the "crypto_currency" field.
func CryptoCurrencyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCryptoCurrency, vs...))
}

// CryptoCurrencyGT applies the GT predicate on the "crypto_currency" field.
func CryptoCurrencyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCryptoCurrency, v))
}

// CryptoCurrencyGTE applies the GTE predicate on the "crypto_currency" field.
func CryptoCurrencyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCryptoCurrency, v))
}

// CryptoCurrencyLT applies the LT predicate on the "crypto_currency" field.
func CryptoCurrencyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCryptoCurrency, v))
}

// CryptoCurrencyLTE applies the LTE predicate on the "crypto_currency" field.
func CryptoCurrencyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCryptoCurrency, v))
}

// CryptoCurrencyContains applies the Contains predicate on the "crypto_currency" field.
func CryptoCurrencyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCryptoCurrency, v))
}

// CryptoCurrencyHasPrefix applies the HasPrefix predicate on the "crypto_currency" field.
func CryptoCurrencyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCryptoCurrency, v))
}

// CryptoCurrencyHasSuffix applies the HasSuffix predicate on the "crypto_currency" field.
func CryptoCurrencyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCryptoCurrency, v))
}

// CryptoCurrencyEqualFold applies the EqualFold predicate on the "crypto_currency" field.
func CryptoCurrencyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCryptoCurrency, v))
}

// CryptoCurrencyContainsFold applies the ContainsFold predicate on the "crypto_currency" field.
func CryptoCurrencyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCryptoCurrency, v))
}

// CronEQ applies the EQ predicate on the "cron" field.
func CronEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCron, v))
}

// CronNEQ applies the NEQ predicate on the "cron" field.
func CronNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCron, v))
}

// CronIn applies the In predicate on the "cron" field.
func CronIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCron, vs...))
}

// CronNotIn applies the NotIn predicate on the "cron" field.
func CronNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCron, vs...))
}

// CronGT applies the GT predicate on the "cron" field.
func CronGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCron, v))
}

// CronGTE applies the GTE predicate on the "cron" field.
func CronGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCron, v))
}

// CronLT applies the LT predicate on the "cron" field.
func CronLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCron, v))
}

// CronLTE applies the LTE predicate on the "cron" field.
func CronLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCron, v))
}

// CronContains applies the Contains predicate on the "cron" field.
func CronContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCron, v))
}

// CronHasPrefix applies the HasPrefix predicate on the "cron" field.
func CronHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCron, v))
}

// CronHasSuffix applies the HasSuffix predicate on the "cron" field.
func CronHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCron, v))
}

// CronEqualFold applies the EqualFold predicate on the "cron" field.
func CronEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCron, v))
}

// CronContainsFold applies the ContainsFold predicate on the "cron" field.
func CronContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCron, v))
}

// NextExecutionTimeEQ applies the EQ predicate on the "next_execution_time" field.
func NextExecutionTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNextExecutionTime, v))
}

// NextExecutionTimeNEQ applies the NEQ predicate on the "next_execution_time" field.
func NextExecutionTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldNextExecutionTime, v))
}

// NextExecutionTimeIn applies the In predicate on the "next_execution_time" field.
func NextExecutionTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldNextExecutionTime, vs...))
}

// NextExecutionTimeNotIn applies the NotIn predicate on the "next_execution_time" field.
func NextExecutionTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldNextExecutionTime, vs...))
}

// NextExecutionTimeGT applies the GT predicate on the "next_execution_time" field.
func NextExecutionTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldNextExecutionTime, v))
}

// NextExecutionTimeGTE applies the GTE predicate on the "next_execution_time" field.
func NextExecutionTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldNextExecutionTime, v))
}

// NextExecutionTimeLT applies the LT predicate on the "next_execution_time" field.
func NextExecutionTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldNextExecutionTime, v))
}

// NextExecutionTimeLTE applies the LTE predicate on the "next_execution_time" field.
func NextExecutionTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldNextExecutionTime, v))
}

// NextExecutionTimeIsNil applies the IsNil predicate on the "next_execution_time" field.
func NextExecutionTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldNextExecutionTime))
}

// NextExecutionTimeNotNil applies the NotNil predicate on the "next_execution_time" field.
func NextExecutionTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldNextExecutionTime))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsActive, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldType, v))
}

// ParamsIsNil applies the IsNil predicate on the "params" field.
func ParamsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldParams))
}

// ParamsNotNil applies the NotNil predicate on the "params" field.
func ParamsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldParams))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTradingAccount applies the HasEdge predicate on the "trading_account" edge.
func HasTradingAccount() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TradingAccountTable, TradingAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTradingAccountWith applies the HasEdge predicate on the "trading_account" edge with a given conditions (other predicates).
func HasTradingAccountWith(preds ...predicate.TradingAccount) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTradingAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskHistories applies the HasEdge predicate on the "task_histories" edge.
func HasTaskHistories() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskHistoriesTable, TaskHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskHistoriesWith applies the HasEdge predicate on the "task_histories" edge with a given conditions (other predicates).
func HasTaskHistoriesWith(preds ...predicate.TaskHistory) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTaskHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
