// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// TradingAccountCreate is the builder for creating a TradingAccount entity.
type TradingAccountCreate struct {
	config
	mutation *TradingAccountMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (tac *TradingAccountCreate) SetUserID(i int) *TradingAccountCreate {
	tac.mutation.SetUserID(i)
	return tac
}

// SetName sets the "name" field.
func (tac *TradingAccountCreate) SetName(s string) *TradingAccountCreate {
	tac.mutation.SetName(s)
	return tac
}

// SetExchange sets the "exchange" field.
func (tac *TradingAccountCreate) SetExchange(s string) *TradingAccountCreate {
	tac.mutation.SetExchange(s)
	return tac
}

// SetIP sets the "ip" field.
func (tac *TradingAccountCreate) SetIP(s string) *TradingAccountCreate {
	tac.mutation.SetIP(s)
	return tac
}

// SetKey sets the "key" field.
func (tac *TradingAccountCreate) SetKey(s string) *TradingAccountCreate {
	tac.mutation.SetKey(s)
	return tac
}

// SetSecret sets the "secret" field.
func (tac *TradingAccountCreate) SetSecret(s string) *TradingAccountCreate {
	tac.mutation.SetSecret(s)
	return tac
}

// SetPhrase sets the "phrase" field.
func (tac *TradingAccountCreate) SetPhrase(s string) *TradingAccountCreate {
	tac.mutation.SetPhrase(s)
	return tac
}

// SetNillablePhrase sets the "phrase" field if the given value is not nil.
func (tac *TradingAccountCreate) SetNillablePhrase(s *string) *TradingAccountCreate {
	if s != nil {
		tac.SetPhrase(*s)
	}
	return tac
}

// SetUpdatedAt sets the "updated_at" field.
func (tac *TradingAccountCreate) SetUpdatedAt(t time.Time) *TradingAccountCreate {
	tac.mutation.SetUpdatedAt(t)
	return tac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tac *TradingAccountCreate) SetNillableUpdatedAt(t *time.Time) *TradingAccountCreate {
	if t != nil {
		tac.SetUpdatedAt(*t)
	}
	return tac
}

// SetCreatedAt sets the "created_at" field.
func (tac *TradingAccountCreate) SetCreatedAt(t time.Time) *TradingAccountCreate {
	tac.mutation.SetCreatedAt(t)
	return tac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tac *TradingAccountCreate) SetNillableCreatedAt(t *time.Time) *TradingAccountCreate {
	if t != nil {
		tac.SetCreatedAt(*t)
	}
	return tac
}

// SetID sets the "id" field.
func (tac *TradingAccountCreate) SetID(i int) *TradingAccountCreate {
	tac.mutation.SetID(i)
	return tac
}

// SetUser sets the "user" edge to the User entity.
func (tac *TradingAccountCreate) SetUser(u *User) *TradingAccountCreate {
	return tac.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tac *TradingAccountCreate) AddTaskIDs(ids ...int) *TradingAccountCreate {
	tac.mutation.AddTaskIDs(ids...)
	return tac
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tac *TradingAccountCreate) AddTasks(t ...*Task) *TradingAccountCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tac.AddTaskIDs(ids...)
}

// Mutation returns the TradingAccountMutation object of the builder.
func (tac *TradingAccountCreate) Mutation() *TradingAccountMutation {
	return tac.mutation
}

// Save creates the TradingAccount in the database.
func (tac *TradingAccountCreate) Save(ctx context.Context) (*TradingAccount, error) {
	tac.defaults()
	return withHooks(ctx, tac.sqlSave, tac.mutation, tac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TradingAccountCreate) SaveX(ctx context.Context) *TradingAccount {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TradingAccountCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TradingAccountCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *TradingAccountCreate) defaults() {
	if _, ok := tac.mutation.UpdatedAt(); !ok {
		v := tradingaccount.DefaultUpdatedAt()
		tac.mutation.SetUpdatedAt(v)
	}
	if _, ok := tac.mutation.CreatedAt(); !ok {
		v := tradingaccount.DefaultCreatedAt()
		tac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TradingAccountCreate) check() error {
	if _, ok := tac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TradingAccount.user_id"`)}
	}
	if v, ok := tac.mutation.UserID(); ok {
		if err := tradingaccount.UserIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "TradingAccount.user_id": %w`, err)}
		}
	}
	if _, ok := tac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TradingAccount.name"`)}
	}
	if _, ok := tac.mutation.Exchange(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New(`ent: missing required field "TradingAccount.exchange"`)}
	}
	if _, ok := tac.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "TradingAccount.ip"`)}
	}
	if _, ok := tac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "TradingAccount.key"`)}
	}
	if _, ok := tac.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "TradingAccount.secret"`)}
	}
	if _, ok := tac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TradingAccount.updated_at"`)}
	}
	if _, ok := tac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TradingAccount.created_at"`)}
	}
	if v, ok := tac.mutation.ID(); ok {
		if err := tradingaccount.IDValidator(int(v)); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TradingAccount.id": %w`, err)}
		}
	}
	if _, ok := tac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TradingAccount.user"`)}
	}
	return nil
}

func (tac *TradingAccountCreate) sqlSave(ctx context.Context) (*TradingAccount, error) {
	if err := tac.check(); err != nil {
		return nil, err
	}
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tac.mutation.id = &_node.ID
	tac.mutation.done = true
	return _node, nil
}

func (tac *TradingAccountCreate) createSpec() (*TradingAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &TradingAccount{config: tac.config}
		_spec = sqlgraph.NewCreateSpec(tradingaccount.Table, sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt))
	)
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tac.mutation.Name(); ok {
		_spec.SetField(tradingaccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tac.mutation.Exchange(); ok {
		_spec.SetField(tradingaccount.FieldExchange, field.TypeString, value)
		_node.Exchange = value
	}
	if value, ok := tac.mutation.IP(); ok {
		_spec.SetField(tradingaccount.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := tac.mutation.Key(); ok {
		_spec.SetField(tradingaccount.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := tac.mutation.Secret(); ok {
		_spec.SetField(tradingaccount.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := tac.mutation.Phrase(); ok {
		_spec.SetField(tradingaccount.FieldPhrase, field.TypeString, value)
		_node.Phrase = value
	}
	if value, ok := tac.mutation.UpdatedAt(); ok {
		_spec.SetField(tradingaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tac.mutation.CreatedAt(); ok {
		_spec.SetField(tradingaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingaccount.UserTable,
			Columns: []string{tradingaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tac.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradingaccount.TasksTable,
			Columns: []string{tradingaccount.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TradingAccountCreateBulk is the builder for creating many TradingAccount entities in bulk.
type TradingAccountCreateBulk struct {
	config
	err      error
	builders []*TradingAccountCreate
}

// Save creates the TradingAccount entities in the database.
func (tacb *TradingAccountCreateBulk) Save(ctx context.Context) ([]*TradingAccount, error) {
	if tacb.err != nil {
		return nil, tacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TradingAccount, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TradingAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TradingAccountCreateBulk) SaveX(ctx context.Context) []*TradingAccount {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TradingAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TradingAccountCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}
