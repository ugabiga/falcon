// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/taskhistory"
)

// TaskHistory is the model entity for the TaskHistory schema.
type TaskHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// IsSuccess holds the value of the "is_success" field.
	IsSuccess bool `json:"is_success,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskHistoryQuery when eager-loading is set.
	Edges               TaskHistoryEdges `json:"edges"`
	task_task_histories *uint64
	selectValues        sql.SelectValues
}

// TaskHistoryEdges holds the relations/edges for other nodes in the graph.
type TaskHistoryEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskHistoryEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskhistory.FieldIsSuccess:
			values[i] = new(sql.NullBool)
		case taskhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case taskhistory.FieldUpdatedAt, taskhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case taskhistory.ForeignKeys[0]: // task_task_histories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskHistory fields.
func (th *TaskHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			th.ID = uint64(value.Int64)
		case taskhistory.FieldIsSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_success", values[i])
			} else if value.Valid {
				th.IsSuccess = value.Bool
			}
		case taskhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				th.UpdatedAt = value.Time
			}
		case taskhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				th.CreatedAt = value.Time
			}
		case taskhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_task_histories", value)
			} else if value.Valid {
				th.task_task_histories = new(uint64)
				*th.task_task_histories = uint64(value.Int64)
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskHistory.
// This includes values selected through modifiers, order, etc.
func (th *TaskHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the TaskHistory entity.
func (th *TaskHistory) QueryTask() *TaskQuery {
	return NewTaskHistoryClient(th.config).QueryTask(th)
}

// Update returns a builder for updating this TaskHistory.
// Note that you need to call TaskHistory.Unwrap() before calling this method if this TaskHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TaskHistory) Update() *TaskHistoryUpdateOne {
	return NewTaskHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TaskHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TaskHistory) Unwrap() *TaskHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TaskHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TaskHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("is_success=")
	builder.WriteString(fmt.Sprintf("%v", th.IsSuccess))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(th.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(th.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskHistories is a parsable slice of TaskHistory.
type TaskHistories []*TaskHistory
