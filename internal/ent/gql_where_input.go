// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/ugabiga/falcon/internal/ent/authentication"
	"github.com/ugabiga/falcon/internal/ent/predicate"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/taskhistory"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// AuthenticationWhereInput represents a where input for filtering Authentication queries.
type AuthenticationWhereInput struct {
	Predicates []predicate.Authentication  `json:"-"`
	Not        *AuthenticationWhereInput   `json:"not,omitempty"`
	Or         []*AuthenticationWhereInput `json:"or,omitempty"`
	And        []*AuthenticationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int  `json:"userID,omitempty"`
	UserIDNEQ   *int  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int `json:"userIDIn,omitempty"`
	UserIDNotIn []int `json:"userIDNotIn,omitempty"`

	// "provider" field predicates.
	Provider      *authentication.Provider  `json:"provider,omitempty"`
	ProviderNEQ   *authentication.Provider  `json:"providerNEQ,omitempty"`
	ProviderIn    []authentication.Provider `json:"providerIn,omitempty"`
	ProviderNotIn []authentication.Provider `json:"providerNotIn,omitempty"`

	// "identifier" field predicates.
	Identifier             *string  `json:"identifier,omitempty"`
	IdentifierNEQ          *string  `json:"identifierNEQ,omitempty"`
	IdentifierIn           []string `json:"identifierIn,omitempty"`
	IdentifierNotIn        []string `json:"identifierNotIn,omitempty"`
	IdentifierGT           *string  `json:"identifierGT,omitempty"`
	IdentifierGTE          *string  `json:"identifierGTE,omitempty"`
	IdentifierLT           *string  `json:"identifierLT,omitempty"`
	IdentifierLTE          *string  `json:"identifierLTE,omitempty"`
	IdentifierContains     *string  `json:"identifierContains,omitempty"`
	IdentifierHasPrefix    *string  `json:"identifierHasPrefix,omitempty"`
	IdentifierHasSuffix    *string  `json:"identifierHasSuffix,omitempty"`
	IdentifierEqualFold    *string  `json:"identifierEqualFold,omitempty"`
	IdentifierContainsFold *string  `json:"identifierContainsFold,omitempty"`

	// "credential" field predicates.
	Credential             *string  `json:"credential,omitempty"`
	CredentialNEQ          *string  `json:"credentialNEQ,omitempty"`
	CredentialIn           []string `json:"credentialIn,omitempty"`
	CredentialNotIn        []string `json:"credentialNotIn,omitempty"`
	CredentialGT           *string  `json:"credentialGT,omitempty"`
	CredentialGTE          *string  `json:"credentialGTE,omitempty"`
	CredentialLT           *string  `json:"credentialLT,omitempty"`
	CredentialLTE          *string  `json:"credentialLTE,omitempty"`
	CredentialContains     *string  `json:"credentialContains,omitempty"`
	CredentialHasPrefix    *string  `json:"credentialHasPrefix,omitempty"`
	CredentialHasSuffix    *string  `json:"credentialHasSuffix,omitempty"`
	CredentialEqualFold    *string  `json:"credentialEqualFold,omitempty"`
	CredentialContainsFold *string  `json:"credentialContainsFold,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AuthenticationWhereInput) AddPredicates(predicates ...predicate.Authentication) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AuthenticationWhereInput filter on the AuthenticationQuery builder.
func (i *AuthenticationWhereInput) Filter(q *AuthenticationQuery) (*AuthenticationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAuthenticationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAuthenticationWhereInput is returned in case the AuthenticationWhereInput is empty.
var ErrEmptyAuthenticationWhereInput = errors.New("ent: empty predicate AuthenticationWhereInput")

// P returns a predicate for filtering authentications.
// An error is returned if the input is empty or invalid.
func (i *AuthenticationWhereInput) P() (predicate.Authentication, error) {
	var predicates []predicate.Authentication
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, authentication.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Authentication, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, authentication.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Authentication, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, authentication.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, authentication.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, authentication.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, authentication.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, authentication.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, authentication.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, authentication.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, authentication.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, authentication.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, authentication.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, authentication.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, authentication.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, authentication.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.Provider != nil {
		predicates = append(predicates, authentication.ProviderEQ(*i.Provider))
	}
	if i.ProviderNEQ != nil {
		predicates = append(predicates, authentication.ProviderNEQ(*i.ProviderNEQ))
	}
	if len(i.ProviderIn) > 0 {
		predicates = append(predicates, authentication.ProviderIn(i.ProviderIn...))
	}
	if len(i.ProviderNotIn) > 0 {
		predicates = append(predicates, authentication.ProviderNotIn(i.ProviderNotIn...))
	}
	if i.Identifier != nil {
		predicates = append(predicates, authentication.IdentifierEQ(*i.Identifier))
	}
	if i.IdentifierNEQ != nil {
		predicates = append(predicates, authentication.IdentifierNEQ(*i.IdentifierNEQ))
	}
	if len(i.IdentifierIn) > 0 {
		predicates = append(predicates, authentication.IdentifierIn(i.IdentifierIn...))
	}
	if len(i.IdentifierNotIn) > 0 {
		predicates = append(predicates, authentication.IdentifierNotIn(i.IdentifierNotIn...))
	}
	if i.IdentifierGT != nil {
		predicates = append(predicates, authentication.IdentifierGT(*i.IdentifierGT))
	}
	if i.IdentifierGTE != nil {
		predicates = append(predicates, authentication.IdentifierGTE(*i.IdentifierGTE))
	}
	if i.IdentifierLT != nil {
		predicates = append(predicates, authentication.IdentifierLT(*i.IdentifierLT))
	}
	if i.IdentifierLTE != nil {
		predicates = append(predicates, authentication.IdentifierLTE(*i.IdentifierLTE))
	}
	if i.IdentifierContains != nil {
		predicates = append(predicates, authentication.IdentifierContains(*i.IdentifierContains))
	}
	if i.IdentifierHasPrefix != nil {
		predicates = append(predicates, authentication.IdentifierHasPrefix(*i.IdentifierHasPrefix))
	}
	if i.IdentifierHasSuffix != nil {
		predicates = append(predicates, authentication.IdentifierHasSuffix(*i.IdentifierHasSuffix))
	}
	if i.IdentifierEqualFold != nil {
		predicates = append(predicates, authentication.IdentifierEqualFold(*i.IdentifierEqualFold))
	}
	if i.IdentifierContainsFold != nil {
		predicates = append(predicates, authentication.IdentifierContainsFold(*i.IdentifierContainsFold))
	}
	if i.Credential != nil {
		predicates = append(predicates, authentication.CredentialEQ(*i.Credential))
	}
	if i.CredentialNEQ != nil {
		predicates = append(predicates, authentication.CredentialNEQ(*i.CredentialNEQ))
	}
	if len(i.CredentialIn) > 0 {
		predicates = append(predicates, authentication.CredentialIn(i.CredentialIn...))
	}
	if len(i.CredentialNotIn) > 0 {
		predicates = append(predicates, authentication.CredentialNotIn(i.CredentialNotIn...))
	}
	if i.CredentialGT != nil {
		predicates = append(predicates, authentication.CredentialGT(*i.CredentialGT))
	}
	if i.CredentialGTE != nil {
		predicates = append(predicates, authentication.CredentialGTE(*i.CredentialGTE))
	}
	if i.CredentialLT != nil {
		predicates = append(predicates, authentication.CredentialLT(*i.CredentialLT))
	}
	if i.CredentialLTE != nil {
		predicates = append(predicates, authentication.CredentialLTE(*i.CredentialLTE))
	}
	if i.CredentialContains != nil {
		predicates = append(predicates, authentication.CredentialContains(*i.CredentialContains))
	}
	if i.CredentialHasPrefix != nil {
		predicates = append(predicates, authentication.CredentialHasPrefix(*i.CredentialHasPrefix))
	}
	if i.CredentialHasSuffix != nil {
		predicates = append(predicates, authentication.CredentialHasSuffix(*i.CredentialHasSuffix))
	}
	if i.CredentialEqualFold != nil {
		predicates = append(predicates, authentication.CredentialEqualFold(*i.CredentialEqualFold))
	}
	if i.CredentialContainsFold != nil {
		predicates = append(predicates, authentication.CredentialContainsFold(*i.CredentialContainsFold))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, authentication.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, authentication.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, authentication.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, authentication.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, authentication.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, authentication.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, authentication.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, authentication.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, authentication.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, authentication.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, authentication.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, authentication.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, authentication.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, authentication.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, authentication.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, authentication.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasUser != nil {
		p := authentication.HasUser()
		if !*i.HasUser {
			p = authentication.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, authentication.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAuthenticationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return authentication.And(predicates...), nil
	}
}

// TaskWhereInput represents a where input for filtering Task queries.
type TaskWhereInput struct {
	Predicates []predicate.Task  `json:"-"`
	Not        *TaskWhereInput   `json:"not,omitempty"`
	Or         []*TaskWhereInput `json:"or,omitempty"`
	And        []*TaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "trading_account_id" field predicates.
	TradingAccountID      *int  `json:"tradingAccountID,omitempty"`
	TradingAccountIDNEQ   *int  `json:"tradingAccountIDNEQ,omitempty"`
	TradingAccountIDIn    []int `json:"tradingAccountIDIn,omitempty"`
	TradingAccountIDNotIn []int `json:"tradingAccountIDNotIn,omitempty"`

	// "currency" field predicates.
	Currency             *string  `json:"currency,omitempty"`
	CurrencyNEQ          *string  `json:"currencyNEQ,omitempty"`
	CurrencyIn           []string `json:"currencyIn,omitempty"`
	CurrencyNotIn        []string `json:"currencyNotIn,omitempty"`
	CurrencyGT           *string  `json:"currencyGT,omitempty"`
	CurrencyGTE          *string  `json:"currencyGTE,omitempty"`
	CurrencyLT           *string  `json:"currencyLT,omitempty"`
	CurrencyLTE          *string  `json:"currencyLTE,omitempty"`
	CurrencyContains     *string  `json:"currencyContains,omitempty"`
	CurrencyHasPrefix    *string  `json:"currencyHasPrefix,omitempty"`
	CurrencyHasSuffix    *string  `json:"currencyHasSuffix,omitempty"`
	CurrencyEqualFold    *string  `json:"currencyEqualFold,omitempty"`
	CurrencyContainsFold *string  `json:"currencyContainsFold,omitempty"`

	// "currency_quantity" field predicates.
	CurrencyQuantity      *float32  `json:"currencyQuantity,omitempty"`
	CurrencyQuantityNEQ   *float32  `json:"currencyQuantityNEQ,omitempty"`
	CurrencyQuantityIn    []float32 `json:"currencyQuantityIn,omitempty"`
	CurrencyQuantityNotIn []float32 `json:"currencyQuantityNotIn,omitempty"`
	CurrencyQuantityGT    *float32  `json:"currencyQuantityGT,omitempty"`
	CurrencyQuantityGTE   *float32  `json:"currencyQuantityGTE,omitempty"`
	CurrencyQuantityLT    *float32  `json:"currencyQuantityLT,omitempty"`
	CurrencyQuantityLTE   *float32  `json:"currencyQuantityLTE,omitempty"`

	// "cron" field predicates.
	Cron             *string  `json:"cron,omitempty"`
	CronNEQ          *string  `json:"cronNEQ,omitempty"`
	CronIn           []string `json:"cronIn,omitempty"`
	CronNotIn        []string `json:"cronNotIn,omitempty"`
	CronGT           *string  `json:"cronGT,omitempty"`
	CronGTE          *string  `json:"cronGTE,omitempty"`
	CronLT           *string  `json:"cronLT,omitempty"`
	CronLTE          *string  `json:"cronLTE,omitempty"`
	CronContains     *string  `json:"cronContains,omitempty"`
	CronHasPrefix    *string  `json:"cronHasPrefix,omitempty"`
	CronHasSuffix    *string  `json:"cronHasSuffix,omitempty"`
	CronEqualFold    *string  `json:"cronEqualFold,omitempty"`
	CronContainsFold *string  `json:"cronContainsFold,omitempty"`

	// "next_execution_time" field predicates.
	NextExecutionTime       *time.Time  `json:"nextExecutionTime,omitempty"`
	NextExecutionTimeNEQ    *time.Time  `json:"nextExecutionTimeNEQ,omitempty"`
	NextExecutionTimeIn     []time.Time `json:"nextExecutionTimeIn,omitempty"`
	NextExecutionTimeNotIn  []time.Time `json:"nextExecutionTimeNotIn,omitempty"`
	NextExecutionTimeGT     *time.Time  `json:"nextExecutionTimeGT,omitempty"`
	NextExecutionTimeGTE    *time.Time  `json:"nextExecutionTimeGTE,omitempty"`
	NextExecutionTimeLT     *time.Time  `json:"nextExecutionTimeLT,omitempty"`
	NextExecutionTimeLTE    *time.Time  `json:"nextExecutionTimeLTE,omitempty"`
	NextExecutionTimeIsNil  bool        `json:"nextExecutionTimeIsNil,omitempty"`
	NextExecutionTimeNotNil bool        `json:"nextExecutionTimeNotNil,omitempty"`

	// "is_active" field predicates.
	IsActive    *bool `json:"isActive,omitempty"`
	IsActiveNEQ *bool `json:"isActiveNEQ,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "trading_account" edge predicates.
	HasTradingAccount     *bool                       `json:"hasTradingAccount,omitempty"`
	HasTradingAccountWith []*TradingAccountWhereInput `json:"hasTradingAccountWith,omitempty"`

	// "task_histories" edge predicates.
	HasTaskHistories     *bool                    `json:"hasTaskHistories,omitempty"`
	HasTaskHistoriesWith []*TaskHistoryWhereInput `json:"hasTaskHistoriesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TaskWhereInput) AddPredicates(predicates ...predicate.Task) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TaskWhereInput filter on the TaskQuery builder.
func (i *TaskWhereInput) Filter(q *TaskQuery) (*TaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTaskWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTaskWhereInput is returned in case the TaskWhereInput is empty.
var ErrEmptyTaskWhereInput = errors.New("ent: empty predicate TaskWhereInput")

// P returns a predicate for filtering tasks.
// An error is returned if the input is empty or invalid.
func (i *TaskWhereInput) P() (predicate.Task, error) {
	var predicates []predicate.Task
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, task.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Task, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, task.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Task, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, task.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, task.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, task.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, task.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, task.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, task.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, task.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, task.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, task.IDLTE(*i.IDLTE))
	}
	if i.TradingAccountID != nil {
		predicates = append(predicates, task.TradingAccountIDEQ(*i.TradingAccountID))
	}
	if i.TradingAccountIDNEQ != nil {
		predicates = append(predicates, task.TradingAccountIDNEQ(*i.TradingAccountIDNEQ))
	}
	if len(i.TradingAccountIDIn) > 0 {
		predicates = append(predicates, task.TradingAccountIDIn(i.TradingAccountIDIn...))
	}
	if len(i.TradingAccountIDNotIn) > 0 {
		predicates = append(predicates, task.TradingAccountIDNotIn(i.TradingAccountIDNotIn...))
	}
	if i.Currency != nil {
		predicates = append(predicates, task.CurrencyEQ(*i.Currency))
	}
	if i.CurrencyNEQ != nil {
		predicates = append(predicates, task.CurrencyNEQ(*i.CurrencyNEQ))
	}
	if len(i.CurrencyIn) > 0 {
		predicates = append(predicates, task.CurrencyIn(i.CurrencyIn...))
	}
	if len(i.CurrencyNotIn) > 0 {
		predicates = append(predicates, task.CurrencyNotIn(i.CurrencyNotIn...))
	}
	if i.CurrencyGT != nil {
		predicates = append(predicates, task.CurrencyGT(*i.CurrencyGT))
	}
	if i.CurrencyGTE != nil {
		predicates = append(predicates, task.CurrencyGTE(*i.CurrencyGTE))
	}
	if i.CurrencyLT != nil {
		predicates = append(predicates, task.CurrencyLT(*i.CurrencyLT))
	}
	if i.CurrencyLTE != nil {
		predicates = append(predicates, task.CurrencyLTE(*i.CurrencyLTE))
	}
	if i.CurrencyContains != nil {
		predicates = append(predicates, task.CurrencyContains(*i.CurrencyContains))
	}
	if i.CurrencyHasPrefix != nil {
		predicates = append(predicates, task.CurrencyHasPrefix(*i.CurrencyHasPrefix))
	}
	if i.CurrencyHasSuffix != nil {
		predicates = append(predicates, task.CurrencyHasSuffix(*i.CurrencyHasSuffix))
	}
	if i.CurrencyEqualFold != nil {
		predicates = append(predicates, task.CurrencyEqualFold(*i.CurrencyEqualFold))
	}
	if i.CurrencyContainsFold != nil {
		predicates = append(predicates, task.CurrencyContainsFold(*i.CurrencyContainsFold))
	}
	if i.CurrencyQuantity != nil {
		predicates = append(predicates, task.CurrencyQuantityEQ(*i.CurrencyQuantity))
	}
	if i.CurrencyQuantityNEQ != nil {
		predicates = append(predicates, task.CurrencyQuantityNEQ(*i.CurrencyQuantityNEQ))
	}
	if len(i.CurrencyQuantityIn) > 0 {
		predicates = append(predicates, task.CurrencyQuantityIn(i.CurrencyQuantityIn...))
	}
	if len(i.CurrencyQuantityNotIn) > 0 {
		predicates = append(predicates, task.CurrencyQuantityNotIn(i.CurrencyQuantityNotIn...))
	}
	if i.CurrencyQuantityGT != nil {
		predicates = append(predicates, task.CurrencyQuantityGT(*i.CurrencyQuantityGT))
	}
	if i.CurrencyQuantityGTE != nil {
		predicates = append(predicates, task.CurrencyQuantityGTE(*i.CurrencyQuantityGTE))
	}
	if i.CurrencyQuantityLT != nil {
		predicates = append(predicates, task.CurrencyQuantityLT(*i.CurrencyQuantityLT))
	}
	if i.CurrencyQuantityLTE != nil {
		predicates = append(predicates, task.CurrencyQuantityLTE(*i.CurrencyQuantityLTE))
	}
	if i.Cron != nil {
		predicates = append(predicates, task.CronEQ(*i.Cron))
	}
	if i.CronNEQ != nil {
		predicates = append(predicates, task.CronNEQ(*i.CronNEQ))
	}
	if len(i.CronIn) > 0 {
		predicates = append(predicates, task.CronIn(i.CronIn...))
	}
	if len(i.CronNotIn) > 0 {
		predicates = append(predicates, task.CronNotIn(i.CronNotIn...))
	}
	if i.CronGT != nil {
		predicates = append(predicates, task.CronGT(*i.CronGT))
	}
	if i.CronGTE != nil {
		predicates = append(predicates, task.CronGTE(*i.CronGTE))
	}
	if i.CronLT != nil {
		predicates = append(predicates, task.CronLT(*i.CronLT))
	}
	if i.CronLTE != nil {
		predicates = append(predicates, task.CronLTE(*i.CronLTE))
	}
	if i.CronContains != nil {
		predicates = append(predicates, task.CronContains(*i.CronContains))
	}
	if i.CronHasPrefix != nil {
		predicates = append(predicates, task.CronHasPrefix(*i.CronHasPrefix))
	}
	if i.CronHasSuffix != nil {
		predicates = append(predicates, task.CronHasSuffix(*i.CronHasSuffix))
	}
	if i.CronEqualFold != nil {
		predicates = append(predicates, task.CronEqualFold(*i.CronEqualFold))
	}
	if i.CronContainsFold != nil {
		predicates = append(predicates, task.CronContainsFold(*i.CronContainsFold))
	}
	if i.NextExecutionTime != nil {
		predicates = append(predicates, task.NextExecutionTimeEQ(*i.NextExecutionTime))
	}
	if i.NextExecutionTimeNEQ != nil {
		predicates = append(predicates, task.NextExecutionTimeNEQ(*i.NextExecutionTimeNEQ))
	}
	if len(i.NextExecutionTimeIn) > 0 {
		predicates = append(predicates, task.NextExecutionTimeIn(i.NextExecutionTimeIn...))
	}
	if len(i.NextExecutionTimeNotIn) > 0 {
		predicates = append(predicates, task.NextExecutionTimeNotIn(i.NextExecutionTimeNotIn...))
	}
	if i.NextExecutionTimeGT != nil {
		predicates = append(predicates, task.NextExecutionTimeGT(*i.NextExecutionTimeGT))
	}
	if i.NextExecutionTimeGTE != nil {
		predicates = append(predicates, task.NextExecutionTimeGTE(*i.NextExecutionTimeGTE))
	}
	if i.NextExecutionTimeLT != nil {
		predicates = append(predicates, task.NextExecutionTimeLT(*i.NextExecutionTimeLT))
	}
	if i.NextExecutionTimeLTE != nil {
		predicates = append(predicates, task.NextExecutionTimeLTE(*i.NextExecutionTimeLTE))
	}
	if i.NextExecutionTimeIsNil {
		predicates = append(predicates, task.NextExecutionTimeIsNil())
	}
	if i.NextExecutionTimeNotNil {
		predicates = append(predicates, task.NextExecutionTimeNotNil())
	}
	if i.IsActive != nil {
		predicates = append(predicates, task.IsActiveEQ(*i.IsActive))
	}
	if i.IsActiveNEQ != nil {
		predicates = append(predicates, task.IsActiveNEQ(*i.IsActiveNEQ))
	}
	if i.Type != nil {
		predicates = append(predicates, task.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, task.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, task.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, task.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, task.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, task.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, task.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, task.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, task.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, task.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, task.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, task.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, task.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, task.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, task.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, task.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, task.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, task.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, task.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, task.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, task.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, task.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, task.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, task.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, task.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, task.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, task.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, task.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, task.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasTradingAccount != nil {
		p := task.HasTradingAccount()
		if !*i.HasTradingAccount {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTradingAccountWith) > 0 {
		with := make([]predicate.TradingAccount, 0, len(i.HasTradingAccountWith))
		for _, w := range i.HasTradingAccountWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTradingAccountWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTradingAccountWith(with...))
	}
	if i.HasTaskHistories != nil {
		p := task.HasTaskHistories()
		if !*i.HasTaskHistories {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskHistoriesWith) > 0 {
		with := make([]predicate.TaskHistory, 0, len(i.HasTaskHistoriesWith))
		for _, w := range i.HasTaskHistoriesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaskHistoriesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskHistoriesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTaskWhereInput
	case 1:
		return predicates[0], nil
	default:
		return task.And(predicates...), nil
	}
}

// TaskHistoryWhereInput represents a where input for filtering TaskHistory queries.
type TaskHistoryWhereInput struct {
	Predicates []predicate.TaskHistory  `json:"-"`
	Not        *TaskHistoryWhereInput   `json:"not,omitempty"`
	Or         []*TaskHistoryWhereInput `json:"or,omitempty"`
	And        []*TaskHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID      *int  `json:"taskID,omitempty"`
	TaskIDNEQ   *int  `json:"taskIDNEQ,omitempty"`
	TaskIDIn    []int `json:"taskIDIn,omitempty"`
	TaskIDNotIn []int `json:"taskIDNotIn,omitempty"`

	// "is_success" field predicates.
	IsSuccess    *bool `json:"isSuccess,omitempty"`
	IsSuccessNEQ *bool `json:"isSuccessNEQ,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TaskHistoryWhereInput) AddPredicates(predicates ...predicate.TaskHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TaskHistoryWhereInput filter on the TaskHistoryQuery builder.
func (i *TaskHistoryWhereInput) Filter(q *TaskHistoryQuery) (*TaskHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTaskHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTaskHistoryWhereInput is returned in case the TaskHistoryWhereInput is empty.
var ErrEmptyTaskHistoryWhereInput = errors.New("ent: empty predicate TaskHistoryWhereInput")

// P returns a predicate for filtering taskhistories.
// An error is returned if the input is empty or invalid.
func (i *TaskHistoryWhereInput) P() (predicate.TaskHistory, error) {
	var predicates []predicate.TaskHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, taskhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, taskhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskhistory.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskhistory.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskhistory.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskhistory.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskhistory.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.IsSuccess != nil {
		predicates = append(predicates, taskhistory.IsSuccessEQ(*i.IsSuccess))
	}
	if i.IsSuccessNEQ != nil {
		predicates = append(predicates, taskhistory.IsSuccessNEQ(*i.IsSuccessNEQ))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasTask != nil {
		p := taskhistory.HasTask()
		if !*i.HasTask {
			p = taskhistory.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaskWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskhistory.HasTaskWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTaskHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return taskhistory.And(predicates...), nil
	}
}

// TradingAccountWhereInput represents a where input for filtering TradingAccount queries.
type TradingAccountWhereInput struct {
	Predicates []predicate.TradingAccount  `json:"-"`
	Not        *TradingAccountWhereInput   `json:"not,omitempty"`
	Or         []*TradingAccountWhereInput `json:"or,omitempty"`
	And        []*TradingAccountWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int  `json:"userID,omitempty"`
	UserIDNEQ   *int  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int `json:"userIDIn,omitempty"`
	UserIDNotIn []int `json:"userIDNotIn,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "exchange" field predicates.
	Exchange             *string  `json:"exchange,omitempty"`
	ExchangeNEQ          *string  `json:"exchangeNEQ,omitempty"`
	ExchangeIn           []string `json:"exchangeIn,omitempty"`
	ExchangeNotIn        []string `json:"exchangeNotIn,omitempty"`
	ExchangeGT           *string  `json:"exchangeGT,omitempty"`
	ExchangeGTE          *string  `json:"exchangeGTE,omitempty"`
	ExchangeLT           *string  `json:"exchangeLT,omitempty"`
	ExchangeLTE          *string  `json:"exchangeLTE,omitempty"`
	ExchangeContains     *string  `json:"exchangeContains,omitempty"`
	ExchangeHasPrefix    *string  `json:"exchangeHasPrefix,omitempty"`
	ExchangeHasSuffix    *string  `json:"exchangeHasSuffix,omitempty"`
	ExchangeEqualFold    *string  `json:"exchangeEqualFold,omitempty"`
	ExchangeContainsFold *string  `json:"exchangeContainsFold,omitempty"`

	// "ip" field predicates.
	IP             *string  `json:"ip,omitempty"`
	IPNEQ          *string  `json:"ipNEQ,omitempty"`
	IPIn           []string `json:"ipIn,omitempty"`
	IPNotIn        []string `json:"ipNotIn,omitempty"`
	IPGT           *string  `json:"ipGT,omitempty"`
	IPGTE          *string  `json:"ipGTE,omitempty"`
	IPLT           *string  `json:"ipLT,omitempty"`
	IPLTE          *string  `json:"ipLTE,omitempty"`
	IPContains     *string  `json:"ipContains,omitempty"`
	IPHasPrefix    *string  `json:"ipHasPrefix,omitempty"`
	IPHasSuffix    *string  `json:"ipHasSuffix,omitempty"`
	IPEqualFold    *string  `json:"ipEqualFold,omitempty"`
	IPContainsFold *string  `json:"ipContainsFold,omitempty"`

	// "identifier" field predicates.
	Identifier             *string  `json:"identifier,omitempty"`
	IdentifierNEQ          *string  `json:"identifierNEQ,omitempty"`
	IdentifierIn           []string `json:"identifierIn,omitempty"`
	IdentifierNotIn        []string `json:"identifierNotIn,omitempty"`
	IdentifierGT           *string  `json:"identifierGT,omitempty"`
	IdentifierGTE          *string  `json:"identifierGTE,omitempty"`
	IdentifierLT           *string  `json:"identifierLT,omitempty"`
	IdentifierLTE          *string  `json:"identifierLTE,omitempty"`
	IdentifierContains     *string  `json:"identifierContains,omitempty"`
	IdentifierHasPrefix    *string  `json:"identifierHasPrefix,omitempty"`
	IdentifierHasSuffix    *string  `json:"identifierHasSuffix,omitempty"`
	IdentifierEqualFold    *string  `json:"identifierEqualFold,omitempty"`
	IdentifierContainsFold *string  `json:"identifierContainsFold,omitempty"`

	// "credential" field predicates.
	Credential             *string  `json:"credential,omitempty"`
	CredentialNEQ          *string  `json:"credentialNEQ,omitempty"`
	CredentialIn           []string `json:"credentialIn,omitempty"`
	CredentialNotIn        []string `json:"credentialNotIn,omitempty"`
	CredentialGT           *string  `json:"credentialGT,omitempty"`
	CredentialGTE          *string  `json:"credentialGTE,omitempty"`
	CredentialLT           *string  `json:"credentialLT,omitempty"`
	CredentialLTE          *string  `json:"credentialLTE,omitempty"`
	CredentialContains     *string  `json:"credentialContains,omitempty"`
	CredentialHasPrefix    *string  `json:"credentialHasPrefix,omitempty"`
	CredentialHasSuffix    *string  `json:"credentialHasSuffix,omitempty"`
	CredentialEqualFold    *string  `json:"credentialEqualFold,omitempty"`
	CredentialContainsFold *string  `json:"credentialContainsFold,omitempty"`

	// "phrase" field predicates.
	Phrase             *string  `json:"phrase,omitempty"`
	PhraseNEQ          *string  `json:"phraseNEQ,omitempty"`
	PhraseIn           []string `json:"phraseIn,omitempty"`
	PhraseNotIn        []string `json:"phraseNotIn,omitempty"`
	PhraseGT           *string  `json:"phraseGT,omitempty"`
	PhraseGTE          *string  `json:"phraseGTE,omitempty"`
	PhraseLT           *string  `json:"phraseLT,omitempty"`
	PhraseLTE          *string  `json:"phraseLTE,omitempty"`
	PhraseContains     *string  `json:"phraseContains,omitempty"`
	PhraseHasPrefix    *string  `json:"phraseHasPrefix,omitempty"`
	PhraseHasSuffix    *string  `json:"phraseHasSuffix,omitempty"`
	PhraseIsNil        bool     `json:"phraseIsNil,omitempty"`
	PhraseNotNil       bool     `json:"phraseNotNil,omitempty"`
	PhraseEqualFold    *string  `json:"phraseEqualFold,omitempty"`
	PhraseContainsFold *string  `json:"phraseContainsFold,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "tasks" edge predicates.
	HasTasks     *bool             `json:"hasTasks,omitempty"`
	HasTasksWith []*TaskWhereInput `json:"hasTasksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TradingAccountWhereInput) AddPredicates(predicates ...predicate.TradingAccount) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TradingAccountWhereInput filter on the TradingAccountQuery builder.
func (i *TradingAccountWhereInput) Filter(q *TradingAccountQuery) (*TradingAccountQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTradingAccountWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTradingAccountWhereInput is returned in case the TradingAccountWhereInput is empty.
var ErrEmptyTradingAccountWhereInput = errors.New("ent: empty predicate TradingAccountWhereInput")

// P returns a predicate for filtering tradingaccounts.
// An error is returned if the input is empty or invalid.
func (i *TradingAccountWhereInput) P() (predicate.TradingAccount, error) {
	var predicates []predicate.TradingAccount
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tradingaccount.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TradingAccount, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tradingaccount.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TradingAccount, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tradingaccount.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tradingaccount.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tradingaccount.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tradingaccount.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tradingaccount.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tradingaccount.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tradingaccount.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tradingaccount.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tradingaccount.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, tradingaccount.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, tradingaccount.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, tradingaccount.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, tradingaccount.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.Name != nil {
		predicates = append(predicates, tradingaccount.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tradingaccount.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tradingaccount.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tradingaccount.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tradingaccount.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tradingaccount.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tradingaccount.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tradingaccount.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tradingaccount.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tradingaccount.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tradingaccount.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tradingaccount.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tradingaccount.NameContainsFold(*i.NameContainsFold))
	}
	if i.Exchange != nil {
		predicates = append(predicates, tradingaccount.ExchangeEQ(*i.Exchange))
	}
	if i.ExchangeNEQ != nil {
		predicates = append(predicates, tradingaccount.ExchangeNEQ(*i.ExchangeNEQ))
	}
	if len(i.ExchangeIn) > 0 {
		predicates = append(predicates, tradingaccount.ExchangeIn(i.ExchangeIn...))
	}
	if len(i.ExchangeNotIn) > 0 {
		predicates = append(predicates, tradingaccount.ExchangeNotIn(i.ExchangeNotIn...))
	}
	if i.ExchangeGT != nil {
		predicates = append(predicates, tradingaccount.ExchangeGT(*i.ExchangeGT))
	}
	if i.ExchangeGTE != nil {
		predicates = append(predicates, tradingaccount.ExchangeGTE(*i.ExchangeGTE))
	}
	if i.ExchangeLT != nil {
		predicates = append(predicates, tradingaccount.ExchangeLT(*i.ExchangeLT))
	}
	if i.ExchangeLTE != nil {
		predicates = append(predicates, tradingaccount.ExchangeLTE(*i.ExchangeLTE))
	}
	if i.ExchangeContains != nil {
		predicates = append(predicates, tradingaccount.ExchangeContains(*i.ExchangeContains))
	}
	if i.ExchangeHasPrefix != nil {
		predicates = append(predicates, tradingaccount.ExchangeHasPrefix(*i.ExchangeHasPrefix))
	}
	if i.ExchangeHasSuffix != nil {
		predicates = append(predicates, tradingaccount.ExchangeHasSuffix(*i.ExchangeHasSuffix))
	}
	if i.ExchangeEqualFold != nil {
		predicates = append(predicates, tradingaccount.ExchangeEqualFold(*i.ExchangeEqualFold))
	}
	if i.ExchangeContainsFold != nil {
		predicates = append(predicates, tradingaccount.ExchangeContainsFold(*i.ExchangeContainsFold))
	}
	if i.IP != nil {
		predicates = append(predicates, tradingaccount.IPEQ(*i.IP))
	}
	if i.IPNEQ != nil {
		predicates = append(predicates, tradingaccount.IPNEQ(*i.IPNEQ))
	}
	if len(i.IPIn) > 0 {
		predicates = append(predicates, tradingaccount.IPIn(i.IPIn...))
	}
	if len(i.IPNotIn) > 0 {
		predicates = append(predicates, tradingaccount.IPNotIn(i.IPNotIn...))
	}
	if i.IPGT != nil {
		predicates = append(predicates, tradingaccount.IPGT(*i.IPGT))
	}
	if i.IPGTE != nil {
		predicates = append(predicates, tradingaccount.IPGTE(*i.IPGTE))
	}
	if i.IPLT != nil {
		predicates = append(predicates, tradingaccount.IPLT(*i.IPLT))
	}
	if i.IPLTE != nil {
		predicates = append(predicates, tradingaccount.IPLTE(*i.IPLTE))
	}
	if i.IPContains != nil {
		predicates = append(predicates, tradingaccount.IPContains(*i.IPContains))
	}
	if i.IPHasPrefix != nil {
		predicates = append(predicates, tradingaccount.IPHasPrefix(*i.IPHasPrefix))
	}
	if i.IPHasSuffix != nil {
		predicates = append(predicates, tradingaccount.IPHasSuffix(*i.IPHasSuffix))
	}
	if i.IPEqualFold != nil {
		predicates = append(predicates, tradingaccount.IPEqualFold(*i.IPEqualFold))
	}
	if i.IPContainsFold != nil {
		predicates = append(predicates, tradingaccount.IPContainsFold(*i.IPContainsFold))
	}
	if i.Identifier != nil {
		predicates = append(predicates, tradingaccount.IdentifierEQ(*i.Identifier))
	}
	if i.IdentifierNEQ != nil {
		predicates = append(predicates, tradingaccount.IdentifierNEQ(*i.IdentifierNEQ))
	}
	if len(i.IdentifierIn) > 0 {
		predicates = append(predicates, tradingaccount.IdentifierIn(i.IdentifierIn...))
	}
	if len(i.IdentifierNotIn) > 0 {
		predicates = append(predicates, tradingaccount.IdentifierNotIn(i.IdentifierNotIn...))
	}
	if i.IdentifierGT != nil {
		predicates = append(predicates, tradingaccount.IdentifierGT(*i.IdentifierGT))
	}
	if i.IdentifierGTE != nil {
		predicates = append(predicates, tradingaccount.IdentifierGTE(*i.IdentifierGTE))
	}
	if i.IdentifierLT != nil {
		predicates = append(predicates, tradingaccount.IdentifierLT(*i.IdentifierLT))
	}
	if i.IdentifierLTE != nil {
		predicates = append(predicates, tradingaccount.IdentifierLTE(*i.IdentifierLTE))
	}
	if i.IdentifierContains != nil {
		predicates = append(predicates, tradingaccount.IdentifierContains(*i.IdentifierContains))
	}
	if i.IdentifierHasPrefix != nil {
		predicates = append(predicates, tradingaccount.IdentifierHasPrefix(*i.IdentifierHasPrefix))
	}
	if i.IdentifierHasSuffix != nil {
		predicates = append(predicates, tradingaccount.IdentifierHasSuffix(*i.IdentifierHasSuffix))
	}
	if i.IdentifierEqualFold != nil {
		predicates = append(predicates, tradingaccount.IdentifierEqualFold(*i.IdentifierEqualFold))
	}
	if i.IdentifierContainsFold != nil {
		predicates = append(predicates, tradingaccount.IdentifierContainsFold(*i.IdentifierContainsFold))
	}
	if i.Credential != nil {
		predicates = append(predicates, tradingaccount.CredentialEQ(*i.Credential))
	}
	if i.CredentialNEQ != nil {
		predicates = append(predicates, tradingaccount.CredentialNEQ(*i.CredentialNEQ))
	}
	if len(i.CredentialIn) > 0 {
		predicates = append(predicates, tradingaccount.CredentialIn(i.CredentialIn...))
	}
	if len(i.CredentialNotIn) > 0 {
		predicates = append(predicates, tradingaccount.CredentialNotIn(i.CredentialNotIn...))
	}
	if i.CredentialGT != nil {
		predicates = append(predicates, tradingaccount.CredentialGT(*i.CredentialGT))
	}
	if i.CredentialGTE != nil {
		predicates = append(predicates, tradingaccount.CredentialGTE(*i.CredentialGTE))
	}
	if i.CredentialLT != nil {
		predicates = append(predicates, tradingaccount.CredentialLT(*i.CredentialLT))
	}
	if i.CredentialLTE != nil {
		predicates = append(predicates, tradingaccount.CredentialLTE(*i.CredentialLTE))
	}
	if i.CredentialContains != nil {
		predicates = append(predicates, tradingaccount.CredentialContains(*i.CredentialContains))
	}
	if i.CredentialHasPrefix != nil {
		predicates = append(predicates, tradingaccount.CredentialHasPrefix(*i.CredentialHasPrefix))
	}
	if i.CredentialHasSuffix != nil {
		predicates = append(predicates, tradingaccount.CredentialHasSuffix(*i.CredentialHasSuffix))
	}
	if i.CredentialEqualFold != nil {
		predicates = append(predicates, tradingaccount.CredentialEqualFold(*i.CredentialEqualFold))
	}
	if i.CredentialContainsFold != nil {
		predicates = append(predicates, tradingaccount.CredentialContainsFold(*i.CredentialContainsFold))
	}
	if i.Phrase != nil {
		predicates = append(predicates, tradingaccount.PhraseEQ(*i.Phrase))
	}
	if i.PhraseNEQ != nil {
		predicates = append(predicates, tradingaccount.PhraseNEQ(*i.PhraseNEQ))
	}
	if len(i.PhraseIn) > 0 {
		predicates = append(predicates, tradingaccount.PhraseIn(i.PhraseIn...))
	}
	if len(i.PhraseNotIn) > 0 {
		predicates = append(predicates, tradingaccount.PhraseNotIn(i.PhraseNotIn...))
	}
	if i.PhraseGT != nil {
		predicates = append(predicates, tradingaccount.PhraseGT(*i.PhraseGT))
	}
	if i.PhraseGTE != nil {
		predicates = append(predicates, tradingaccount.PhraseGTE(*i.PhraseGTE))
	}
	if i.PhraseLT != nil {
		predicates = append(predicates, tradingaccount.PhraseLT(*i.PhraseLT))
	}
	if i.PhraseLTE != nil {
		predicates = append(predicates, tradingaccount.PhraseLTE(*i.PhraseLTE))
	}
	if i.PhraseContains != nil {
		predicates = append(predicates, tradingaccount.PhraseContains(*i.PhraseContains))
	}
	if i.PhraseHasPrefix != nil {
		predicates = append(predicates, tradingaccount.PhraseHasPrefix(*i.PhraseHasPrefix))
	}
	if i.PhraseHasSuffix != nil {
		predicates = append(predicates, tradingaccount.PhraseHasSuffix(*i.PhraseHasSuffix))
	}
	if i.PhraseIsNil {
		predicates = append(predicates, tradingaccount.PhraseIsNil())
	}
	if i.PhraseNotNil {
		predicates = append(predicates, tradingaccount.PhraseNotNil())
	}
	if i.PhraseEqualFold != nil {
		predicates = append(predicates, tradingaccount.PhraseEqualFold(*i.PhraseEqualFold))
	}
	if i.PhraseContainsFold != nil {
		predicates = append(predicates, tradingaccount.PhraseContainsFold(*i.PhraseContainsFold))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tradingaccount.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tradingaccount.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tradingaccount.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tradingaccount.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tradingaccount.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tradingaccount.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tradingaccount.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tradingaccount.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tradingaccount.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tradingaccount.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tradingaccount.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasUser != nil {
		p := tradingaccount.HasUser()
		if !*i.HasUser {
			p = tradingaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tradingaccount.HasUserWith(with...))
	}
	if i.HasTasks != nil {
		p := tradingaccount.HasTasks()
		if !*i.HasTasks {
			p = tradingaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTasksWith))
		for _, w := range i.HasTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTasksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tradingaccount.HasTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTradingAccountWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tradingaccount.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "timezone" field predicates.
	Timezone             *string  `json:"timezone,omitempty"`
	TimezoneNEQ          *string  `json:"timezoneNEQ,omitempty"`
	TimezoneIn           []string `json:"timezoneIn,omitempty"`
	TimezoneNotIn        []string `json:"timezoneNotIn,omitempty"`
	TimezoneGT           *string  `json:"timezoneGT,omitempty"`
	TimezoneGTE          *string  `json:"timezoneGTE,omitempty"`
	TimezoneLT           *string  `json:"timezoneLT,omitempty"`
	TimezoneLTE          *string  `json:"timezoneLTE,omitempty"`
	TimezoneContains     *string  `json:"timezoneContains,omitempty"`
	TimezoneHasPrefix    *string  `json:"timezoneHasPrefix,omitempty"`
	TimezoneHasSuffix    *string  `json:"timezoneHasSuffix,omitempty"`
	TimezoneIsNil        bool     `json:"timezoneIsNil,omitempty"`
	TimezoneNotNil       bool     `json:"timezoneNotNil,omitempty"`
	TimezoneEqualFold    *string  `json:"timezoneEqualFold,omitempty"`
	TimezoneContainsFold *string  `json:"timezoneContainsFold,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "authentications" edge predicates.
	HasAuthentications     *bool                       `json:"hasAuthentications,omitempty"`
	HasAuthenticationsWith []*AuthenticationWhereInput `json:"hasAuthenticationsWith,omitempty"`

	// "trading_accounts" edge predicates.
	HasTradingAccounts     *bool                       `json:"hasTradingAccounts,omitempty"`
	HasTradingAccountsWith []*TradingAccountWhereInput `json:"hasTradingAccountsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, user.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, user.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Timezone != nil {
		predicates = append(predicates, user.TimezoneEQ(*i.Timezone))
	}
	if i.TimezoneNEQ != nil {
		predicates = append(predicates, user.TimezoneNEQ(*i.TimezoneNEQ))
	}
	if len(i.TimezoneIn) > 0 {
		predicates = append(predicates, user.TimezoneIn(i.TimezoneIn...))
	}
	if len(i.TimezoneNotIn) > 0 {
		predicates = append(predicates, user.TimezoneNotIn(i.TimezoneNotIn...))
	}
	if i.TimezoneGT != nil {
		predicates = append(predicates, user.TimezoneGT(*i.TimezoneGT))
	}
	if i.TimezoneGTE != nil {
		predicates = append(predicates, user.TimezoneGTE(*i.TimezoneGTE))
	}
	if i.TimezoneLT != nil {
		predicates = append(predicates, user.TimezoneLT(*i.TimezoneLT))
	}
	if i.TimezoneLTE != nil {
		predicates = append(predicates, user.TimezoneLTE(*i.TimezoneLTE))
	}
	if i.TimezoneContains != nil {
		predicates = append(predicates, user.TimezoneContains(*i.TimezoneContains))
	}
	if i.TimezoneHasPrefix != nil {
		predicates = append(predicates, user.TimezoneHasPrefix(*i.TimezoneHasPrefix))
	}
	if i.TimezoneHasSuffix != nil {
		predicates = append(predicates, user.TimezoneHasSuffix(*i.TimezoneHasSuffix))
	}
	if i.TimezoneIsNil {
		predicates = append(predicates, user.TimezoneIsNil())
	}
	if i.TimezoneNotNil {
		predicates = append(predicates, user.TimezoneNotNil())
	}
	if i.TimezoneEqualFold != nil {
		predicates = append(predicates, user.TimezoneEqualFold(*i.TimezoneEqualFold))
	}
	if i.TimezoneContainsFold != nil {
		predicates = append(predicates, user.TimezoneContainsFold(*i.TimezoneContainsFold))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasAuthentications != nil {
		p := user.HasAuthentications()
		if !*i.HasAuthentications {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthenticationsWith) > 0 {
		with := make([]predicate.Authentication, 0, len(i.HasAuthenticationsWith))
		for _, w := range i.HasAuthenticationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthenticationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasAuthenticationsWith(with...))
	}
	if i.HasTradingAccounts != nil {
		p := user.HasTradingAccounts()
		if !*i.HasTradingAccounts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTradingAccountsWith) > 0 {
		with := make([]predicate.TradingAccount, 0, len(i.HasTradingAccountsWith))
		for _, w := range i.HasTradingAccountsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTradingAccountsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTradingAccountsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
