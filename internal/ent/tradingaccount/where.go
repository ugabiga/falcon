// Code generated by ent, DO NOT EDIT.

package tradingaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugabiga/falcon/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TradingAccount {
	vc := int(v)
	return predicate.TradingAccount(sql.FieldEQ(FieldUserID, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldName, v))
}

// Exchange applies equality check predicate on the "exchange" field. It's identical to ExchangeEQ.
func Exchange(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldExchange, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldIP, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldKey, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldSecret, v))
}

// Phrase applies equality check predicate on the "phrase" field. It's identical to PhraseEQ.
func Phrase(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldPhrase, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TradingAccount {
	vc := int(v)
	return predicate.TradingAccount(sql.FieldEQ(FieldUserID, vc))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TradingAccount {
	vc := int(v)
	return predicate.TradingAccount(sql.FieldNEQ(FieldUserID, vc))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TradingAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.TradingAccount(sql.FieldIn(FieldUserID, v...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TradingAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.TradingAccount(sql.FieldNotIn(FieldUserID, v...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldName, v))
}

// ExchangeEQ applies the EQ predicate on the "exchange" field.
func ExchangeEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldExchange, v))
}

// ExchangeNEQ applies the NEQ predicate on the "exchange" field.
func ExchangeNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldExchange, v))
}

// ExchangeIn applies the In predicate on the "exchange" field.
func ExchangeIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldExchange, vs...))
}

// ExchangeNotIn applies the NotIn predicate on the "exchange" field.
func ExchangeNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldExchange, vs...))
}

// ExchangeGT applies the GT predicate on the "exchange" field.
func ExchangeGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldExchange, v))
}

// ExchangeGTE applies the GTE predicate on the "exchange" field.
func ExchangeGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldExchange, v))
}

// ExchangeLT applies the LT predicate on the "exchange" field.
func ExchangeLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldExchange, v))
}

// ExchangeLTE applies the LTE predicate on the "exchange" field.
func ExchangeLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldExchange, v))
}

// ExchangeContains applies the Contains predicate on the "exchange" field.
func ExchangeContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldExchange, v))
}

// ExchangeHasPrefix applies the HasPrefix predicate on the "exchange" field.
func ExchangeHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldExchange, v))
}

// ExchangeHasSuffix applies the HasSuffix predicate on the "exchange" field.
func ExchangeHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldExchange, v))
}

// ExchangeEqualFold applies the EqualFold predicate on the "exchange" field.
func ExchangeEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldExchange, v))
}

// ExchangeContainsFold applies the ContainsFold predicate on the "exchange" field.
func ExchangeContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldExchange, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldIP, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldKey, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldSecret, v))
}

// PhraseEQ applies the EQ predicate on the "phrase" field.
func PhraseEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldPhrase, v))
}

// PhraseNEQ applies the NEQ predicate on the "phrase" field.
func PhraseNEQ(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldPhrase, v))
}

// PhraseIn applies the In predicate on the "phrase" field.
func PhraseIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldPhrase, vs...))
}

// PhraseNotIn applies the NotIn predicate on the "phrase" field.
func PhraseNotIn(vs ...string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldPhrase, vs...))
}

// PhraseGT applies the GT predicate on the "phrase" field.
func PhraseGT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldPhrase, v))
}

// PhraseGTE applies the GTE predicate on the "phrase" field.
func PhraseGTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldPhrase, v))
}

// PhraseLT applies the LT predicate on the "phrase" field.
func PhraseLT(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldPhrase, v))
}

// PhraseLTE applies the LTE predicate on the "phrase" field.
func PhraseLTE(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldPhrase, v))
}

// PhraseContains applies the Contains predicate on the "phrase" field.
func PhraseContains(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContains(FieldPhrase, v))
}

// PhraseHasPrefix applies the HasPrefix predicate on the "phrase" field.
func PhraseHasPrefix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasPrefix(FieldPhrase, v))
}

// PhraseHasSuffix applies the HasSuffix predicate on the "phrase" field.
func PhraseHasSuffix(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldHasSuffix(FieldPhrase, v))
}

// PhraseIsNil applies the IsNil predicate on the "phrase" field.
func PhraseIsNil() predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIsNull(FieldPhrase))
}

// PhraseNotNil applies the NotNil predicate on the "phrase" field.
func PhraseNotNil() predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotNull(FieldPhrase))
}

// PhraseEqualFold applies the EqualFold predicate on the "phrase" field.
func PhraseEqualFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEqualFold(FieldPhrase, v))
}

// PhraseContainsFold applies the ContainsFold predicate on the "phrase" field.
func PhraseContainsFold(v string) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldContainsFold(FieldPhrase, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TradingAccount {
	return predicate.TradingAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TradingAccount {
	return predicate.TradingAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TradingAccount {
	return predicate.TradingAccount(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.TradingAccount {
	return predicate.TradingAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.TradingAccount {
	return predicate.TradingAccount(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TradingAccount) predicate.TradingAccount {
	return predicate.TradingAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TradingAccount) predicate.TradingAccount {
	return predicate.TradingAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TradingAccount) predicate.TradingAccount {
	return predicate.TradingAccount(sql.NotPredicates(p))
}
