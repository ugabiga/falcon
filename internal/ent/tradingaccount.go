// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// TradingAccount is the model entity for the TradingAccount schema.
type TradingAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Exchange holds the value of the "exchange" field.
	Exchange string `json:"exchange,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Credential holds the value of the "credential" field.
	Credential string `json:"-"`
	// Phrase holds the value of the "phrase" field.
	Phrase string `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradingAccountQuery when eager-loading is set.
	Edges        TradingAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TradingAccountEdges holds the relations/edges for other nodes in the graph.
type TradingAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTasks map[string][]*Task
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TradingAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e TradingAccountEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradingAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradingaccount.FieldID, tradingaccount.FieldUserID:
			values[i] = new(sql.NullInt64)
		case tradingaccount.FieldName, tradingaccount.FieldExchange, tradingaccount.FieldIP, tradingaccount.FieldIdentifier, tradingaccount.FieldCredential, tradingaccount.FieldPhrase:
			values[i] = new(sql.NullString)
		case tradingaccount.FieldUpdatedAt, tradingaccount.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradingAccount fields.
func (ta *TradingAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradingaccount.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ta.ID = int(value.Int64)
			}
		case tradingaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ta.UserID = int(value.Int64)
			}
		case tradingaccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ta.Name = value.String
			}
		case tradingaccount.FieldExchange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange", values[i])
			} else if value.Valid {
				ta.Exchange = value.String
			}
		case tradingaccount.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ta.IP = value.String
			}
		case tradingaccount.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ta.Identifier = value.String
			}
		case tradingaccount.FieldCredential:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential", values[i])
			} else if value.Valid {
				ta.Credential = value.String
			}
		case tradingaccount.FieldPhrase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phrase", values[i])
			} else if value.Valid {
				ta.Phrase = value.String
			}
		case tradingaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ta.UpdatedAt = value.Time
			}
		case tradingaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ta.CreatedAt = value.Time
			}
		default:
			ta.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TradingAccount.
// This includes values selected through modifiers, order, etc.
func (ta *TradingAccount) Value(name string) (ent.Value, error) {
	return ta.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TradingAccount entity.
func (ta *TradingAccount) QueryUser() *UserQuery {
	return NewTradingAccountClient(ta.config).QueryUser(ta)
}

// QueryTasks queries the "tasks" edge of the TradingAccount entity.
func (ta *TradingAccount) QueryTasks() *TaskQuery {
	return NewTradingAccountClient(ta.config).QueryTasks(ta)
}

// Update returns a builder for updating this TradingAccount.
// Note that you need to call TradingAccount.Unwrap() before calling this method if this TradingAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TradingAccount) Update() *TradingAccountUpdateOne {
	return NewTradingAccountClient(ta.config).UpdateOne(ta)
}

// Unwrap unwraps the TradingAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TradingAccount) Unwrap() *TradingAccount {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradingAccount is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TradingAccount) String() string {
	var builder strings.Builder
	builder.WriteString("TradingAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ta.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ta.Name)
	builder.WriteString(", ")
	builder.WriteString("exchange=")
	builder.WriteString(ta.Exchange)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ta.IP)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(ta.Identifier)
	builder.WriteString(", ")
	builder.WriteString("credential=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("phrase=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ta.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ta.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ta *TradingAccount) NamedTasks(name string) ([]*Task, error) {
	if ta.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ta.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ta *TradingAccount) appendNamedTasks(name string, edges ...*Task) {
	if ta.Edges.namedTasks == nil {
		ta.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		ta.Edges.namedTasks[name] = []*Task{}
	} else {
		ta.Edges.namedTasks[name] = append(ta.Edges.namedTasks[name], edges...)
	}
}

// TradingAccounts is a parsable slice of TradingAccount.
type TradingAccounts []*TradingAccount
