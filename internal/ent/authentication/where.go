// Code generated by ent, DO NOT EDIT.

package authentication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugabiga/falcon/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldID, id))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldIdentifier, v))
}

// Credential applies equality check predicate on the "credential" field. It's identical to CredentialEQ.
func Credential(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCredential, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCreatedAt, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v Provider) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v Provider) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...Provider) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...Provider) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldProvider, vs...))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldIdentifier, v))
}

// CredentialEQ applies the EQ predicate on the "credential" field.
func CredentialEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCredential, v))
}

// CredentialNEQ applies the NEQ predicate on the "credential" field.
func CredentialNEQ(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldCredential, v))
}

// CredentialIn applies the In predicate on the "credential" field.
func CredentialIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldCredential, vs...))
}

// CredentialNotIn applies the NotIn predicate on the "credential" field.
func CredentialNotIn(vs ...string) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldCredential, vs...))
}

// CredentialGT applies the GT predicate on the "credential" field.
func CredentialGT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldCredential, v))
}

// CredentialGTE applies the GTE predicate on the "credential" field.
func CredentialGTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldCredential, v))
}

// CredentialLT applies the LT predicate on the "credential" field.
func CredentialLT(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldCredential, v))
}

// CredentialLTE applies the LTE predicate on the "credential" field.
func CredentialLTE(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldCredential, v))
}

// CredentialContains applies the Contains predicate on the "credential" field.
func CredentialContains(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContains(FieldCredential, v))
}

// CredentialHasPrefix applies the HasPrefix predicate on the "credential" field.
func CredentialHasPrefix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasPrefix(FieldCredential, v))
}

// CredentialHasSuffix applies the HasSuffix predicate on the "credential" field.
func CredentialHasSuffix(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldHasSuffix(FieldCredential, v))
}

// CredentialEqualFold applies the EqualFold predicate on the "credential" field.
func CredentialEqualFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldEqualFold(FieldCredential, v))
}

// CredentialContainsFold applies the ContainsFold predicate on the "credential" field.
func CredentialContainsFold(v string) predicate.Authentication {
	return predicate.Authentication(sql.FieldContainsFold(FieldCredential, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Authentication {
	return predicate.Authentication(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Authentication {
	return predicate.Authentication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Authentication {
	return predicate.Authentication(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authentication) predicate.Authentication {
	return predicate.Authentication(sql.NotPredicates(p))
}
