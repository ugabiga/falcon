// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/taskhistory"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetTradingAccountID sets the "trading_account_id" field.
func (tc *TaskCreate) SetTradingAccountID(i int) *TaskCreate {
	tc.mutation.SetTradingAccountID(i)
	return tc
}

// SetCurrency sets the "currency" field.
func (tc *TaskCreate) SetCurrency(s string) *TaskCreate {
	tc.mutation.SetCurrency(s)
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TaskCreate) SetAmount(f float64) *TaskCreate {
	tc.mutation.SetAmount(f)
	return tc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAmount(f *float64) *TaskCreate {
	if f != nil {
		tc.SetAmount(*f)
	}
	return tc
}

// SetCron sets the "cron" field.
func (tc *TaskCreate) SetCron(s string) *TaskCreate {
	tc.mutation.SetCron(s)
	return tc
}

// SetNextExecutionTime sets the "next_execution_time" field.
func (tc *TaskCreate) SetNextExecutionTime(t time.Time) *TaskCreate {
	tc.mutation.SetNextExecutionTime(t)
	return tc
}

// SetNillableNextExecutionTime sets the "next_execution_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableNextExecutionTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetNextExecutionTime(*t)
	}
	return tc
}

// SetIsActive sets the "is_active" field.
func (tc *TaskCreate) SetIsActive(b bool) *TaskCreate {
	tc.mutation.SetIsActive(b)
	return tc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsActive(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsActive(*b)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(s string) *TaskCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetParams sets the "params" field.
func (tc *TaskCreate) SetParams(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetParams(m)
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetTradingAccount sets the "trading_account" edge to the TradingAccount entity.
func (tc *TaskCreate) SetTradingAccount(t *TradingAccount) *TaskCreate {
	return tc.SetTradingAccountID(t.ID)
}

// AddTaskHistoryIDs adds the "task_histories" edge to the TaskHistory entity by IDs.
func (tc *TaskCreate) AddTaskHistoryIDs(ids ...int) *TaskCreate {
	tc.mutation.AddTaskHistoryIDs(ids...)
	return tc
}

// AddTaskHistories adds the "task_histories" edges to the TaskHistory entity.
func (tc *TaskCreate) AddTaskHistories(t ...*TaskHistory) *TaskCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskHistoryIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.Amount(); !ok {
		v := task.DefaultAmount
		tc.mutation.SetAmount(v)
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		v := task.DefaultIsActive
		tc.mutation.SetIsActive(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.TradingAccountID(); !ok {
		return &ValidationError{Name: "trading_account_id", err: errors.New(`ent: missing required field "Task.trading_account_id"`)}
	}
	if v, ok := tc.mutation.TradingAccountID(); ok {
		if err := task.TradingAccountIDValidator(int(v)); err != nil {
			return &ValidationError{Name: "trading_account_id", err: fmt.Errorf(`ent: validator failed for field "Task.trading_account_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Task.currency"`)}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Task.amount"`)}
	}
	if _, ok := tc.mutation.Cron(); !ok {
		return &ValidationError{Name: "cron", err: errors.New(`ent: missing required field "Task.cron"`)}
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Task.is_active"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := task.IDValidator(int(v)); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Task.id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TradingAccountID(); !ok {
		return &ValidationError{Name: "trading_account", err: errors.New(`ent: missing required edge "Task.trading_account"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Currency(); ok {
		_spec.SetField(task.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(task.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.Cron(); ok {
		_spec.SetField(task.FieldCron, field.TypeString, value)
		_node.Cron = value
	}
	if value, ok := tc.mutation.NextExecutionTime(); ok {
		_spec.SetField(task.FieldNextExecutionTime, field.TypeTime, value)
		_node.NextExecutionTime = value
	}
	if value, ok := tc.mutation.IsActive(); ok {
		_spec.SetField(task.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
		_node.Params = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.TradingAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TradingAccountTable,
			Columns: []string{task.TradingAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tradingaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TradingAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskHistoriesTable,
			Columns: []string{task.TaskHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
