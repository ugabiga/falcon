// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/ugabiga/falcon/internal/ent/authentication"
	"github.com/ugabiga/falcon/internal/ent/task"
	"github.com/ugabiga/falcon/internal/ent/taskhistory"
	"github.com/ugabiga/falcon/internal/ent/tradingaccount"
	"github.com/ugabiga/falcon/internal/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AuthenticationQuery) CollectFields(ctx context.Context, satisfies ...string) (*AuthenticationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AuthenticationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(authentication.Columns))
		selectedFields = []string{authentication.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withUser = query
			if _, ok := fieldSeen[authentication.FieldUserID]; !ok {
				selectedFields = append(selectedFields, authentication.FieldUserID)
				fieldSeen[authentication.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[authentication.FieldUserID]; !ok {
				selectedFields = append(selectedFields, authentication.FieldUserID)
				fieldSeen[authentication.FieldUserID] = struct{}{}
			}
		case "provider":
			if _, ok := fieldSeen[authentication.FieldProvider]; !ok {
				selectedFields = append(selectedFields, authentication.FieldProvider)
				fieldSeen[authentication.FieldProvider] = struct{}{}
			}
		case "identifier":
			if _, ok := fieldSeen[authentication.FieldIdentifier]; !ok {
				selectedFields = append(selectedFields, authentication.FieldIdentifier)
				fieldSeen[authentication.FieldIdentifier] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[authentication.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, authentication.FieldUpdatedAt)
				fieldSeen[authentication.FieldUpdatedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[authentication.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, authentication.FieldCreatedAt)
				fieldSeen[authentication.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type authenticationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AuthenticationPaginateOption
}

func newAuthenticationPaginateArgs(rv map[string]any) *authenticationPaginateArgs {
	args := &authenticationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*AuthenticationWhereInput); ok {
		args.opts = append(args.opts, WithAuthenticationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TaskQuery) CollectFields(ctx context.Context, satisfies ...string) (*TaskQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TaskQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(task.Columns))
		selectedFields = []string{task.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "tradingAccount":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TradingAccountClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.withTradingAccount = query
			if _, ok := fieldSeen[task.FieldTradingAccountID]; !ok {
				selectedFields = append(selectedFields, task.FieldTradingAccountID)
				fieldSeen[task.FieldTradingAccountID] = struct{}{}
			}
		case "taskHistories":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TaskHistoryClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedTaskHistories(alias, func(wq *TaskHistoryQuery) {
				*wq = *query
			})
		case "tradingAccountID":
			if _, ok := fieldSeen[task.FieldTradingAccountID]; !ok {
				selectedFields = append(selectedFields, task.FieldTradingAccountID)
				fieldSeen[task.FieldTradingAccountID] = struct{}{}
			}
		case "currency":
			if _, ok := fieldSeen[task.FieldCurrency]; !ok {
				selectedFields = append(selectedFields, task.FieldCurrency)
				fieldSeen[task.FieldCurrency] = struct{}{}
			}
		case "currencyQuantity":
			if _, ok := fieldSeen[task.FieldCurrencyQuantity]; !ok {
				selectedFields = append(selectedFields, task.FieldCurrencyQuantity)
				fieldSeen[task.FieldCurrencyQuantity] = struct{}{}
			}
		case "cron":
			if _, ok := fieldSeen[task.FieldCron]; !ok {
				selectedFields = append(selectedFields, task.FieldCron)
				fieldSeen[task.FieldCron] = struct{}{}
			}
		case "nextExecutionTime":
			if _, ok := fieldSeen[task.FieldNextExecutionTime]; !ok {
				selectedFields = append(selectedFields, task.FieldNextExecutionTime)
				fieldSeen[task.FieldNextExecutionTime] = struct{}{}
			}
		case "isActive":
			if _, ok := fieldSeen[task.FieldIsActive]; !ok {
				selectedFields = append(selectedFields, task.FieldIsActive)
				fieldSeen[task.FieldIsActive] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[task.FieldType]; !ok {
				selectedFields = append(selectedFields, task.FieldType)
				fieldSeen[task.FieldType] = struct{}{}
			}
		case "params":
			if _, ok := fieldSeen[task.FieldParams]; !ok {
				selectedFields = append(selectedFields, task.FieldParams)
				fieldSeen[task.FieldParams] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[task.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, task.FieldUpdatedAt)
				fieldSeen[task.FieldUpdatedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[task.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, task.FieldCreatedAt)
				fieldSeen[task.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type taskPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TaskPaginateOption
}

func newTaskPaginateArgs(rv map[string]any) *taskPaginateArgs {
	args := &taskPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TaskWhereInput); ok {
		args.opts = append(args.opts, WithTaskFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (th *TaskHistoryQuery) CollectFields(ctx context.Context, satisfies ...string) (*TaskHistoryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return th, nil
	}
	if err := th.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return th, nil
}

func (th *TaskHistoryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(taskhistory.Columns))
		selectedFields = []string{taskhistory.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "task":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TaskClient{config: th.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			th.withTask = query
			if _, ok := fieldSeen[taskhistory.FieldTaskID]; !ok {
				selectedFields = append(selectedFields, taskhistory.FieldTaskID)
				fieldSeen[taskhistory.FieldTaskID] = struct{}{}
			}
		case "taskID":
			if _, ok := fieldSeen[taskhistory.FieldTaskID]; !ok {
				selectedFields = append(selectedFields, taskhistory.FieldTaskID)
				fieldSeen[taskhistory.FieldTaskID] = struct{}{}
			}
		case "isSuccess":
			if _, ok := fieldSeen[taskhistory.FieldIsSuccess]; !ok {
				selectedFields = append(selectedFields, taskhistory.FieldIsSuccess)
				fieldSeen[taskhistory.FieldIsSuccess] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[taskhistory.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, taskhistory.FieldUpdatedAt)
				fieldSeen[taskhistory.FieldUpdatedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[taskhistory.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, taskhistory.FieldCreatedAt)
				fieldSeen[taskhistory.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		th.Select(selectedFields...)
	}
	return nil
}

type taskhistoryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TaskHistoryPaginateOption
}

func newTaskHistoryPaginateArgs(rv map[string]any) *taskhistoryPaginateArgs {
	args := &taskhistoryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TaskHistoryWhereInput); ok {
		args.opts = append(args.opts, WithTaskHistoryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ta *TradingAccountQuery) CollectFields(ctx context.Context, satisfies ...string) (*TradingAccountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ta, nil
	}
	if err := ta.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ta, nil
}

func (ta *TradingAccountQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(tradingaccount.Columns))
		selectedFields = []string{tradingaccount.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ta.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ta.withUser = query
			if _, ok := fieldSeen[tradingaccount.FieldUserID]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldUserID)
				fieldSeen[tradingaccount.FieldUserID] = struct{}{}
			}
		case "tasks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TaskClient{config: ta.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ta.WithNamedTasks(alias, func(wq *TaskQuery) {
				*wq = *query
			})
		case "userID":
			if _, ok := fieldSeen[tradingaccount.FieldUserID]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldUserID)
				fieldSeen[tradingaccount.FieldUserID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[tradingaccount.FieldName]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldName)
				fieldSeen[tradingaccount.FieldName] = struct{}{}
			}
		case "exchange":
			if _, ok := fieldSeen[tradingaccount.FieldExchange]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldExchange)
				fieldSeen[tradingaccount.FieldExchange] = struct{}{}
			}
		case "ip":
			if _, ok := fieldSeen[tradingaccount.FieldIP]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldIP)
				fieldSeen[tradingaccount.FieldIP] = struct{}{}
			}
		case "identifier":
			if _, ok := fieldSeen[tradingaccount.FieldIdentifier]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldIdentifier)
				fieldSeen[tradingaccount.FieldIdentifier] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[tradingaccount.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldUpdatedAt)
				fieldSeen[tradingaccount.FieldUpdatedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[tradingaccount.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, tradingaccount.FieldCreatedAt)
				fieldSeen[tradingaccount.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ta.Select(selectedFields...)
	}
	return nil
}

type tradingaccountPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TradingAccountPaginateOption
}

func newTradingAccountPaginateArgs(rv map[string]any) *tradingaccountPaginateArgs {
	args := &tradingaccountPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TradingAccountWhereInput); ok {
		args.opts = append(args.opts, WithTradingAccountFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "authentications":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AuthenticationClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedAuthentications(alias, func(wq *AuthenticationQuery) {
				*wq = *query
			})
		case "tradingAccounts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TradingAccountClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedTradingAccounts(alias, func(wq *TradingAccountQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "timezone":
			if _, ok := fieldSeen[user.FieldTimezone]; !ok {
				selectedFields = append(selectedFields, user.FieldTimezone)
				fieldSeen[user.FieldTimezone] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
