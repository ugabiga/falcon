// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Authentication struct {
	ID         string                 `json:"id"`
	UserID     string                 `json:"userID"`
	Provider   AuthenticationProvider `json:"provider"`
	Identifier string                 `json:"identifier"`
	UpdatedAt  time.Time              `json:"updatedAt"`
	CreatedAt  time.Time              `json:"createdAt"`
	User       *User                  `json:"user"`
}

type Task struct {
	ID                string          `json:"id"`
	TradingAccountID  string          `json:"tradingAccountID"`
	Cron              string          `json:"cron"`
	NextExecutionTime time.Time       `json:"nextExecutionTime"`
	IsActive          bool            `json:"isActive"`
	Type              string          `json:"type"`
	UpdatedAt         time.Time       `json:"updatedAt"`
	CreatedAt         time.Time       `json:"createdAt"`
	TradingAccount    *TradingAccount `json:"tradingAccount"`
	TaskHistories     []*TaskHistory  `json:"taskHistories"`
}

type TaskHistory struct {
	ID        string    `json:"id"`
	TaskID    string    `json:"taskID"`
	IsSuccess bool      `json:"isSuccess"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Task      *Task     `json:"task"`
}

type TradingAccount struct {
	ID         string    `json:"id"`
	UserID     string    `json:"userID"`
	Exchange   string    `json:"exchange"`
	Currency   string    `json:"currency"`
	IP         string    `json:"ip"`
	Identifier string    `json:"identifier"`
	UpdatedAt  time.Time `json:"updatedAt"`
	CreatedAt  time.Time `json:"createdAt"`
	User       *User     `json:"user"`
	Tasks      []*Task   `json:"tasks"`
}

type User struct {
	ID              string            `json:"id"`
	Name            string            `json:"name"`
	Timezone        string            `json:"timezone"`
	UpdatedAt       time.Time         `json:"updatedAt"`
	CreatedAt       time.Time         `json:"createdAt"`
	Authentications []*Authentication `json:"authentications"`
	TradingAccounts []*TradingAccount `json:"tradingAccounts"`
}

type UserWithOptions struct {
	WithTradingAccounts bool `json:"withTradingAccounts"`
	WithAuthentications bool `json:"withAuthentications"`
}

type AuthenticationProvider string

const (
	AuthenticationProviderGoogle   AuthenticationProvider = "google"
	AuthenticationProviderFacebook AuthenticationProvider = "facebook"
)

var AllAuthenticationProvider = []AuthenticationProvider{
	AuthenticationProviderGoogle,
	AuthenticationProviderFacebook,
}

func (e AuthenticationProvider) IsValid() bool {
	switch e {
	case AuthenticationProviderGoogle, AuthenticationProviderFacebook:
		return true
	}
	return false
}

func (e AuthenticationProvider) String() string {
	return string(e)
}

func (e *AuthenticationProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthenticationProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthenticationProvider", str)
	}
	return nil
}

func (e AuthenticationProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
