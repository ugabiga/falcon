// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _TradingAccount_id(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_userID(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_name(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_exchange(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_exchange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exchange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_exchange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_ip(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_ip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_key(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_updatedAt(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2time·öêTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_createdAt(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2time·öêTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_user(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "authentications":
				return ec.fieldContext_User_authentications(ctx, field)
			case "tradingAccounts":
				return ec.fieldContext_User_tradingAccounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccount_tasks(ctx context.Context, field graphql.CollectedField, obj *TradingAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccount_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Task)
	fc.Result = res
	return ec.marshalOTask2·öï·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTask·öÑ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccount_tasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "tradingAccountID":
				return ec.fieldContext_Task_tradingAccountID(ctx, field)
			case "currency":
				return ec.fieldContext_Task_currency(ctx, field)
			case "size":
				return ec.fieldContext_Task_size(ctx, field)
			case "symbol":
				return ec.fieldContext_Task_symbol(ctx, field)
			case "cron":
				return ec.fieldContext_Task_cron(ctx, field)
			case "nextExecutionTime":
				return ec.fieldContext_Task_nextExecutionTime(ctx, field)
			case "isActive":
				return ec.fieldContext_Task_isActive(ctx, field)
			case "type":
				return ec.fieldContext_Task_type(ctx, field)
			case "params":
				return ec.fieldContext_Task_params(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "tradingAccount":
				return ec.fieldContext_Task_tradingAccount(ctx, field)
			case "taskHistories":
				return ec.fieldContext_Task_taskHistories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TradingAccountIndex_tradingAccounts(ctx context.Context, field graphql.CollectedField, obj *TradingAccountIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TradingAccountIndex_tradingAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TradingAccounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*TradingAccount)
	fc.Result = res
	return ec.marshalOTradingAccount2·öï·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount·öÑ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TradingAccountIndex_tradingAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TradingAccountIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TradingAccount_id(ctx, field)
			case "userID":
				return ec.fieldContext_TradingAccount_userID(ctx, field)
			case "name":
				return ec.fieldContext_TradingAccount_name(ctx, field)
			case "exchange":
				return ec.fieldContext_TradingAccount_exchange(ctx, field)
			case "ip":
				return ec.fieldContext_TradingAccount_ip(ctx, field)
			case "key":
				return ec.fieldContext_TradingAccount_key(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TradingAccount_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_TradingAccount_createdAt(ctx, field)
			case "user":
				return ec.fieldContext_TradingAccount_user(ctx, field)
			case "tasks":
				return ec.fieldContext_TradingAccount_tasks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TradingAccount", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var tradingAccountImplementors = []string{"TradingAccount"}

func (ec *executionContext) _TradingAccount(ctx context.Context, sel ast.SelectionSet, obj *TradingAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tradingAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TradingAccount")
		case "id":

			out.Values[i] = ec._TradingAccount_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._TradingAccount_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._TradingAccount_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exchange":

			out.Values[i] = ec._TradingAccount_exchange(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ip":

			out.Values[i] = ec._TradingAccount_ip(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":

			out.Values[i] = ec._TradingAccount_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._TradingAccount_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._TradingAccount_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._TradingAccount_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tasks":

			out.Values[i] = ec._TradingAccount_tasks(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tradingAccountIndexImplementors = []string{"TradingAccountIndex"}

func (ec *executionContext) _TradingAccountIndex(ctx context.Context, sel ast.SelectionSet, obj *TradingAccountIndex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tradingAccountIndexImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TradingAccountIndex")
		case "tradingAccounts":

			out.Values[i] = ec._TradingAccountIndex_tradingAccounts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNTradingAccount2github·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount(ctx context.Context, sel ast.SelectionSet, v TradingAccount) graphql.Marshaler {
	return ec._TradingAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNTradingAccount2·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount(ctx context.Context, sel ast.SelectionSet, v *TradingAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TradingAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNTradingAccountIndex2github·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccountIndex(ctx context.Context, sel ast.SelectionSet, v TradingAccountIndex) graphql.Marshaler {
	return ec._TradingAccountIndex(ctx, sel, &v)
}

func (ec *executionContext) marshalNTradingAccountIndex2·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccountIndex(ctx context.Context, sel ast.SelectionSet, v *TradingAccountIndex) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TradingAccountIndex(ctx, sel, v)
}

func (ec *executionContext) marshalOTradingAccount2·öï·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount·öÑ(ctx context.Context, sel ast.SelectionSet, v []*TradingAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTradingAccount2·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTradingAccount2·öñgithub·öócom·öãugabiga·öãfalcon·öãinternal·öãgraph·öãgenerated·öêTradingAccount(ctx context.Context, sel ast.SelectionSet, v *TradingAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TradingAccount(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
