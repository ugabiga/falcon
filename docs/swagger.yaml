basePath: /
definitions:
  handler.APIError:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  handler.ProtectedResponse:
    properties:
      message:
        type: string
    type: object
  handler.SignInRequest:
    properties:
      access_token:
        type: string
      account_id:
        type: string
      type:
        type: string
    type: object
  handler.SignInResponse:
    properties:
      token:
        type: string
    type: object
  model.Task:
    properties:
      created_at:
        type: string
      cron:
        type: string
      currency:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      next_execution_time:
        type: string
      params:
        additionalProperties: true
        type: object
      size:
        type: number
      symbol:
        type: string
      trading_account_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - created_at
    - cron
    - currency
    - id
    - is_active
    - next_execution_time
    - size
    - symbol
    - trading_account_id
    - type
    - updated_at
    - user_id
    type: object
  model.TradingAccount:
    properties:
      created_at:
        type: string
      exchange:
        type: string
      id:
        type: string
      ip:
        type: string
      key:
        type: string
      name:
        type: string
      phrase:
        type: string
      secret:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - created_at
    - exchange
    - id
    - ip
    - key
    - name
    - phrase
    - updated_at
    - user_id
    type: object
  model.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      timezone:
        type: string
      updated_at:
        type: string
    type: object
  request.UpdateUserRequest:
    properties:
      name:
        type: string
      timezone:
        type: string
    type: object
  v1.TaskIndexResponse:
    properties:
      selected_tasks:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      selected_trading_account:
        $ref: '#/definitions/model.TradingAccount'
      trading_accounts:
        items:
          $ref: '#/definitions/model.TradingAccount'
        type: array
    required:
    - selected_tasks
    - selected_trading_account
    - trading_accounts
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
  description: This is a crypto trading bot API
  license:
    name: BSD-3-Clause
  title: Falcon API
  version: "1.0"
paths:
  /api/v1/tasks:
    get:
      consumes:
      - application/json
      description: Get user tasks
      parameters:
      - description: Trading account ID
        in: query
        name: trading_account_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.TaskIndexResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Get user tasks
      tags:
      - task
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: User profile
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - user
  /auth/protected:
    get:
      consumes:
      - application/json
      description: Protected route
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProtectedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Protected
      tags:
      - authentication
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in with OAuth
      parameters:
      - description: Sign in request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/handler.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SignInResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      summary: Sign in
      tags:
      - authentication
swagger: "2.0"
