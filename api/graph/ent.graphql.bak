directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Authentication implements Node {
  id: ID!
  userID: ID!
  provider: AuthenticationProvider!
  identifier: String!
  updatedAt: Time!
  createdAt: Time!
  user: User!
}
"""A connection to a list of items."""
type AuthenticationConnection {
  """A list of edges."""
  edges: [AuthenticationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuthenticationEdge {
  """The item at the end of the edge."""
  node: Authentication
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""AuthenticationProvider is enum for the field provider"""
enum AuthenticationProvider @goModel(model: "github.com/ugabiga/falcon/internal/ent/authentication.Provider") {
  google
  facebook
}
"""
AuthenticationWhereInput is used for filtering Authentication objects.
Input was generated by ent.
"""
input AuthenticationWhereInput {
  not: AuthenticationWhereInput
  and: [AuthenticationWhereInput!]
  or: [AuthenticationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """provider field predicates"""
  provider: AuthenticationProvider
  providerNEQ: AuthenticationProvider
  providerIn: [AuthenticationProvider!]
  providerNotIn: [AuthenticationProvider!]
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ugabiga/falcon/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  authentications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Authentications returned from the connection."""
    where: AuthenticationWhereInput
  ): AuthenticationConnection!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Tasks returned from the connection."""
    where: TaskWhereInput
  ): TaskConnection!
  taskHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for TaskHistories returned from the connection."""
    where: TaskHistoryWhereInput
  ): TaskHistoryConnection!
  tradingAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for TradingAccounts returned from the connection."""
    where: TradingAccountWhereInput
  ): TradingAccountConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Task implements Node {
  id: ID!
  tradingAccountID: ID!
  cron: String!
  nextExecutionTime: Time
  isActive: Boolean!
  type: String!
  updatedAt: Time!
  createdAt: Time!
  tradingAccount: TradingAccount!
  taskHistories: [TaskHistory!]
}
"""A connection to a list of items."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type TaskHistory implements Node {
  id: ID!
  taskID: ID!
  isSuccess: Boolean!
  updatedAt: Time!
  createdAt: Time!
  task: Task!
}
"""A connection to a list of items."""
type TaskHistoryConnection {
  """A list of edges."""
  edges: [TaskHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskHistoryEdge {
  """The item at the end of the edge."""
  node: TaskHistory
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TaskHistoryWhereInput is used for filtering TaskHistory objects.
Input was generated by ent.
"""
input TaskHistoryWhereInput {
  not: TaskHistoryWhereInput
  and: [TaskHistoryWhereInput!]
  or: [TaskHistoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """task_id field predicates"""
  taskID: ID
  taskIDNEQ: ID
  taskIDIn: [ID!]
  taskIDNotIn: [ID!]
  """is_success field predicates"""
  isSuccess: Boolean
  isSuccessNEQ: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """task edge predicates"""
  hasTask: Boolean
  hasTaskWith: [TaskWhereInput!]
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """trading_account_id field predicates"""
  tradingAccountID: ID
  tradingAccountIDNEQ: ID
  tradingAccountIDIn: [ID!]
  tradingAccountIDNotIn: [ID!]
  """cron field predicates"""
  cron: String
  cronNEQ: String
  cronIn: [String!]
  cronNotIn: [String!]
  cronGT: String
  cronGTE: String
  cronLT: String
  cronLTE: String
  cronContains: String
  cronHasPrefix: String
  cronHasSuffix: String
  cronEqualFold: String
  cronContainsFold: String
  """next_execution_time field predicates"""
  nextExecutionTime: Time
  nextExecutionTimeNEQ: Time
  nextExecutionTimeIn: [Time!]
  nextExecutionTimeNotIn: [Time!]
  nextExecutionTimeGT: Time
  nextExecutionTimeGTE: Time
  nextExecutionTimeLT: Time
  nextExecutionTimeLTE: Time
  nextExecutionTimeIsNil: Boolean
  nextExecutionTimeNotNil: Boolean
  """is_active field predicates"""
  isActive: Boolean
  isActiveNEQ: Boolean
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """trading_account edge predicates"""
  hasTradingAccount: Boolean
  hasTradingAccountWith: [TradingAccountWhereInput!]
  """task_histories edge predicates"""
  hasTaskHistories: Boolean
  hasTaskHistoriesWith: [TaskHistoryWhereInput!]
}
type TradingAccount implements Node {
  id: ID!
  userID: ID!
  name: String!
  exchange: String!
  currency: String!
  ip: String!
  identifier: String!
  updatedAt: Time!
  createdAt: Time!
  user: User!
  tasks: [Task!]
}
"""A connection to a list of items."""
type TradingAccountConnection {
  """A list of edges."""
  edges: [TradingAccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TradingAccountEdge {
  """The item at the end of the edge."""
  node: TradingAccount
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TradingAccountWhereInput is used for filtering TradingAccount objects.
Input was generated by ent.
"""
input TradingAccountWhereInput {
  not: TradingAccountWhereInput
  and: [TradingAccountWhereInput!]
  or: [TradingAccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """exchange field predicates"""
  exchange: String
  exchangeNEQ: String
  exchangeIn: [String!]
  exchangeNotIn: [String!]
  exchangeGT: String
  exchangeGTE: String
  exchangeLT: String
  exchangeLTE: String
  exchangeContains: String
  exchangeHasPrefix: String
  exchangeHasSuffix: String
  exchangeEqualFold: String
  exchangeContainsFold: String
  """currency field predicates"""
  currency: String
  currencyNEQ: String
  currencyIn: [String!]
  currencyNotIn: [String!]
  currencyGT: String
  currencyGTE: String
  currencyLT: String
  currencyLTE: String
  currencyContains: String
  currencyHasPrefix: String
  currencyHasSuffix: String
  currencyEqualFold: String
  currencyContainsFold: String
  """ip field predicates"""
  ip: String
  ipNEQ: String
  ipIn: [String!]
  ipNotIn: [String!]
  ipGT: String
  ipGTE: String
  ipLT: String
  ipLTE: String
  ipContains: String
  ipHasPrefix: String
  ipHasSuffix: String
  ipEqualFold: String
  ipContainsFold: String
  """identifier field predicates"""
  identifier: String
  identifierNEQ: String
  identifierIn: [String!]
  identifierNotIn: [String!]
  identifierGT: String
  identifierGTE: String
  identifierLT: String
  identifierLTE: String
  identifierContains: String
  identifierHasPrefix: String
  identifierHasSuffix: String
  identifierEqualFold: String
  identifierContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """tasks edge predicates"""
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
}
type User implements Node {
  id: ID!
  name: String
  timezone: String
  updatedAt: Time!
  createdAt: Time!
  authentications: [Authentication!]
  tradingAccounts: [TradingAccount!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """timezone field predicates"""
  timezone: String
  timezoneNEQ: String
  timezoneIn: [String!]
  timezoneNotIn: [String!]
  timezoneGT: String
  timezoneGTE: String
  timezoneLT: String
  timezoneLTE: String
  timezoneContains: String
  timezoneHasPrefix: String
  timezoneHasSuffix: String
  timezoneIsNil: Boolean
  timezoneNotNil: Boolean
  timezoneEqualFold: String
  timezoneContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """authentications edge predicates"""
  hasAuthentications: Boolean
  hasAuthenticationsWith: [AuthenticationWhereInput!]
  """trading_accounts edge predicates"""
  hasTradingAccounts: Boolean
  hasTradingAccountsWith: [TradingAccountWhereInput!]
}
